import React, { useState, useEffect, useRef, useCallback } from 'react';
import { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/outline';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import '../animations.css';
import AnimatedBackground from './AnimatedBackground';
import BusinessCreation3D from './BusinessCreation3D';
import { authAPI } from '../services/api';
import { divisionService } from '../services/divisionService';
import { enumService } from '../services/enumService';
import { personService } from '../services/personService';
import PhoneInput from './PhoneInput';
import DivisionSearchInput from './DivisionSearchInput';
import CompanyLocationStep from './CompanyLocationStep';
import jsPDF from 'jspdf';

// Nouveaux types pour l'API backend
export type TypeEntreprise = 'SOCIETE' | 'ENTREPRISE_INDIVIDUELLE';
export type FormeJuridique = 'SARL' | 'SARL_UNI' | 'SUC_SARL' | 'FIL_SARL' | 'SA' | 'SUC_SA' | 'FIL_SA' | 'SASU' | 'SAS' | 'BR' | 'FIL_SAS' | 'SUC_SAS' | 'SNC' | 'SCS' | 'SCI' | 'SCP' | 'GIE' | 'E_I';
export type EntrepriseRole = 'GERANT' | 'DIRIGEANT' | 'ASSOCIE';
export type StatutCreation = 'EN_COURS' | 'VALIDE' | 'REJETE';
export type EtapeValidation = 'CREATION' | 'VALIDATION_DOCUMENTS' | 'PAIEMENT' | 'FINALISATION';
export type DomaineActivites = 'ADMINISTRATEURS_ET_AGENTS_IMMOBILIERS' | 'ARCHITECTE' | 'BTP' | 'CARTOGRAPHIE_TOPOGRAPHIE' | 'GEOMETRES_EXPERTS' | 'INGENIEUR_CONSEIL' | 'PRODUCTEUR_DE_SPECTACLES' | 'PROMOTEUR_IMMOBILIER' | 'STATIONS' | 'TRANSPORT' | 'URBANISTE' | 'ETABLISSEMENT_DE_TOURISME' | 'AGENCE_DE_VOYAGE';
export type TypePersonne = 'PHYSIQUE' | 'MORALE';

export type DomaineActiviteNr = 
  | 'AGRICULTURE_ELEVAGE_PECHE'
  | 'MINES_ET_MINERAIS'
  | 'ENERGIE_ET_RESSOURCES_NATURELLES'
  | 'INDUSTRIE_ET_TRANSFORMATION'
  | 'COMMERCE_ET_DISTRIBUTION'
  | 'TRANSPORTS_ET_LOGISTIQUE'
  | 'TELECOMS_ET_TIC'
  | 'TOURISME_CULTURE_ET_ARTISANAT'
  | 'SANTE_ET_PHARMACEUTIQUE'
  | 'EDUCATION_ET_FORMATION'
  | 'SERVICES_FINANCIERS_ET_ASSURANCES'
  | 'IMMOBILIER_ET_CONSTRUCTION'
  | 'ADMINISTRATION_ET_SERVICES_PUBLICS'
  | 'ENVIRONNEMENT_ET_ECOLOGIE'
  | 'RECHERCHE_ET_INNOVATION'
  | 'INGENIERIE_ET_ETUDES'
  | 'URBANISME_ET_AMENAGEMENT';

gsap.registerPlugin(ScrollTrigger);

// Libellés lisibles pour Civilité et Sexe (valeurs API = names)
export const CIVILITE_LABELS: Record<string, string> = {
  MR: 'Monsieur',
  Mme: 'Madame',
  Melle: 'Mademoiselle',
};
export const SEXE_LABELS: Record<string, string> = {
  MASCULIN: 'Masculin',
  FEMININ: 'Féminin',
};

// Labels pour les domaines d'activité réglementés
export const DOMAINE_ACTIVITE_NR_LABELS: Record<DomaineActiviteNr, string> = {
  AGRICULTURE_ELEVAGE_PECHE: 'Agriculture, Élevage et Pêche',
  MINES_ET_MINERAIS: 'Mines et Minéraux',
  ENERGIE_ET_RESSOURCES_NATURELLES: 'Énergie et Ressources Naturelles',
  INDUSTRIE_ET_TRANSFORMATION: 'Industrie et Transformation',
  COMMERCE_ET_DISTRIBUTION: 'Commerce et Distribution',
  TRANSPORTS_ET_LOGISTIQUE: 'Transports et Logistique',
  TELECOMS_ET_TIC: 'Télécommunications et TIC',
  TOURISME_CULTURE_ET_ARTISANAT: 'Tourisme, Culture et Artisanat',
  SANTE_ET_PHARMACEUTIQUE: 'Santé et Pharmaceutique',
  EDUCATION_ET_FORMATION: 'Éducation et Formation',
  SERVICES_FINANCIERS_ET_ASSURANCES: 'Services Financiers et Assurances',
  IMMOBILIER_ET_CONSTRUCTION: 'Immobilier et Construction (BTP)',
  ADMINISTRATION_ET_SERVICES_PUBLICS: 'Administration et Services Publics',
  ENVIRONNEMENT_ET_ECOLOGIE: 'Environnement et Écologie',
  RECHERCHE_ET_INNOVATION: 'Recherche et Innovation',
  INGENIERIE_ET_ETUDES: 'Ingénierie et Études',
  URBANISME_ET_AMENAGEMENT: 'Urbanisme et Aménagement',
};

// Templates de demandes d'autorisation par domaine réglementé
export const AUTORISATION_TEMPLATES: Record<DomaineActivites, {
  title: string;
  description: string;
  documents: string[];
  procedure: string;
}> = {
  'BTP': {
    title: 'Demande d\'autorisation d\'exercice - BTP',
    description: 'Demande d\'autorisation pour exercer dans le domaine du Bâtiment et Travaux Publics',
    documents: [
      'Certificat de qualification professionnelle',
      'Attestation d\'assurance responsabilité civile professionnelle',
      'Justificatifs d\'expérience dans le domaine',
      'Diplômes et certifications techniques'
    ],
    procedure: 'Déposer le dossier auprès de la Direction Générale des Travaux Publics'
  },
  'TRANSPORT': {
    title: 'Demande d\'autorisation d\'exercice - Transport',
    description: 'Demande d\'autorisation pour exercer dans le domaine du transport',
    documents: [
      'Permis de conduire professionnel',
      'Certificat de visite technique des véhicules',
      'Attestation d\'assurance véhicules',
      'Justificatifs de formation en transport'
    ],
    procedure: 'Déposer le dossier auprès de la Direction des Transports'
  },
  'ARCHITECTE': {
    title: 'Demande d\'autorisation d\'exercice - Architecture',
    description: 'Demande d\'autorisation pour exercer la profession d\'architecte',
    documents: [
      'Diplôme d\'architecte reconnu',
      'Certificat d\'inscription à l\'Ordre des Architectes',
      'Attestation d\'assurance responsabilité civile professionnelle',
      'Portfolio de réalisations'
    ],
    procedure: 'Déposer le dossier auprès de l\'Ordre des Architectes du Mali'
  },
  'URBANISTE': {
    title: 'Demande d\'autorisation d\'exercice - Urbanisme',
    description: 'Demande d\'autorisation pour exercer dans le domaine de l\'urbanisme',
    documents: [
      'Diplôme en urbanisme ou aménagement du territoire',
      'Certificat de qualification professionnelle',
      'Attestation d\'assurance responsabilité civile professionnelle',
      'Justificatifs d\'expérience en urbanisme'
    ],
    procedure: 'Déposer le dossier auprès de la Direction de l\'Urbanisme'
  },
  'INGENIEUR_CONSEIL': {
    title: 'Demande d\'autorisation d\'exercice - Ingénieur Conseil',
    description: 'Demande d\'autorisation pour exercer comme ingénieur conseil',
    documents: [
      'Diplôme d\'ingénieur reconnu',
      'Certificat d\'inscription à l\'Ordre des Ingénieurs',
      'Attestation d\'assurance responsabilité civile professionnelle',
      'Justificatifs d\'expérience professionnelle'
    ],
    procedure: 'Déposer le dossier auprès de l\'Ordre des Ingénieurs du Mali'
  },
  'CARTOGRAPHIE_TOPOGRAPHIE': {
    title: 'Demande d\'autorisation d\'exercice - Cartographie/Topographie',
    description: 'Demande d\'autorisation pour exercer dans le domaine de la cartographie et topographie',
    documents: [
      'Diplôme en géomatique, topographie ou cartographie',
      'Certificat de qualification professionnelle',
      'Attestation d\'assurance responsabilité civile professionnelle',
      'Justificatifs de formation aux outils de mesure'
    ],
    procedure: 'Déposer le dossier auprès de la Direction de la Cartographie'
  },
  'GEOMETRES_EXPERTS': {
    title: 'Demande d\'autorisation d\'exercice - Géomètre Expert',
    description: 'Demande d\'autorisation pour exercer comme géomètre expert',
    documents: [
      'Diplôme de géomètre expert',
      'Certificat d\'inscription à l\'Ordre des Géomètres Experts',
      'Attestation d\'assurance responsabilité civile professionnelle',
      'Justificatifs d\'expérience en géométrie'
    ],
    procedure: 'Déposer le dossier auprès de l\'Ordre des Géomètres Experts'
  },
  'ADMINISTRATEURS_ET_AGENTS_IMMOBILIERS': {
    title: 'Demande d\'autorisation d\'exercice - Immobilier',
    description: 'Demande d\'autorisation pour exercer dans l\'administration immobilière',
    documents: [
      'Certificat de formation en gestion immobilière',
      'Attestation d\'assurance responsabilité civile professionnelle',
      'Justificatifs d\'expérience en immobilier',
      'Caution bancaire'
    ],
    procedure: 'Déposer le dossier auprès de la Direction de l\'Habitat'
  },
  'PROMOTEUR_IMMOBILIER': {
    title: 'Demande d\'autorisation d\'exercice - Promotion Immobilière',
    description: 'Demande d\'autorisation pour exercer comme promoteur immobilier',
    documents: [
      'Justificatifs de capacité financière',
      'Attestation d\'assurance responsabilité civile professionnelle',
      'Justificatifs d\'expérience en promotion immobilière',
      'Garantie bancaire'
    ],
    procedure: 'Déposer le dossier auprès de la Direction de l\'Habitat'
  },
  'PRODUCTEUR_DE_SPECTACLES': {
    title: 'Demande d\'autorisation d\'exercice - Production de Spectacles',
    description: 'Demande d\'autorisation pour exercer comme producteur de spectacles',
    documents: [
      'Justificatifs d\'expérience dans le spectacle',
      'Attestation d\'assurance responsabilité civile',
      'Certificat de formation en production culturelle',
      'Portfolio de productions'
    ],
    procedure: 'Déposer le dossier auprès du Ministère de la Culture'
  },
  'ETABLISSEMENT_DE_TOURISME': {
    title: 'Demande d\'autorisation d\'exercice - Établissement de Tourisme',
    description: 'Demande d\'autorisation pour exploiter un établissement de tourisme',
    documents: [
      'Plan de l\'établissement',
      'Attestation d\'assurance responsabilité civile',
      'Certificat de conformité aux normes touristiques',
      'Justificatifs de formation en hôtellerie/tourisme'
    ],
    procedure: 'Déposer le dossier auprès de l\'Office Malien du Tourisme'
  },
  'AGENCE_DE_VOYAGE': {
    title: 'Demande d\'autorisation d\'exercice - Agence de Voyage',
    description: 'Demande d\'autorisation pour exploiter une agence de voyage',
    documents: [
      'Garantie financière',
      'Attestation d\'assurance responsabilité civile professionnelle',
      'Certificat de formation en tourisme',
      'Justificatifs d\'expérience dans le tourisme'
    ],
    procedure: 'Déposer le dossier auprès de l\'Office Malien du Tourisme'
  },
  'STATIONS': {
    title: 'Demande d\'autorisation d\'exercice - Station Service',
    description: 'Demande d\'autorisation pour exploiter une station service',
    documents: [
      'Étude d\'impact environnemental',
      'Attestation d\'assurance responsabilité civile',
      'Certificat de conformité aux normes de sécurité',
      'Justificatifs de formation en sécurité pétrolière'
    ],
    procedure: 'Déposer le dossier auprès de la Direction de l\'Énergie'
  }
};

// Mapping inverse : domaines non réglementés vers leurs domaines réglementés parents
// domaineActiviteNr (non réglementé) -> domaineActivite (réglementé)
export const DOMAINE_MAPPING_INVERSE: Record<DomaineActivites, DomaineActiviteNr> = {
  'STATIONS': 'ENERGIE_ET_RESSOURCES_NATURELLES',
  'TRANSPORT': 'TRANSPORTS_ET_LOGISTIQUE',
  'PRODUCTEUR_DE_SPECTACLES': 'TOURISME_CULTURE_ET_ARTISANAT',
  'ETABLISSEMENT_DE_TOURISME': 'TOURISME_CULTURE_ET_ARTISANAT',
  'AGENCE_DE_VOYAGE': 'TOURISME_CULTURE_ET_ARTISANAT',
  'ADMINISTRATEURS_ET_AGENTS_IMMOBILIERS': 'IMMOBILIER_ET_CONSTRUCTION',
  'BTP': 'IMMOBILIER_ET_CONSTRUCTION',
  'PROMOTEUR_IMMOBILIER': 'IMMOBILIER_ET_CONSTRUCTION',
  'ARCHITECTE': 'INGENIERIE_ET_ETUDES',
  'CARTOGRAPHIE_TOPOGRAPHIE': 'INGENIERIE_ET_ETUDES',
  'GEOMETRES_EXPERTS': 'INGENIERIE_ET_ETUDES',
  'INGENIEUR_CONSEIL': 'INGENIERIE_ET_ETUDES',
  'URBANISTE': 'URBANISME_ET_AMENAGEMENT',
};

// Mapping entre les domaines réglementés et non réglementés qui se correspondent
// Basé sur la relation parent définie dans l'enum DomaineActivites du backend
export const DOMAINE_MAPPING: Record<DomaineActiviteNr, DomaineActivites[]> = {
  AGRICULTURE_ELEVAGE_PECHE: [], // Pas d'équivalent direct
  MINES_ET_MINERAIS: [], // Pas d'équivalent direct
  ENERGIE_ET_RESSOURCES_NATURELLES: ['STATIONS'], // Stations (ex. stations-service)
  INDUSTRIE_ET_TRANSFORMATION: [], // Pas d'équivalent direct
  COMMERCE_ET_DISTRIBUTION: [], // Pas d'équivalent direct
  TRANSPORTS_ET_LOGISTIQUE: ['TRANSPORT'], // Transport
  TELECOMS_ET_TIC: [], // Pas d'équivalent direct
  TOURISME_CULTURE_ET_ARTISANAT: [
    'PRODUCTEUR_DE_SPECTACLES', // Producteur de Spectacles
    'ETABLISSEMENT_DE_TOURISME', // Établissement de tourisme
    'AGENCE_DE_VOYAGE' // Agence de voyage
  ],
  SANTE_ET_PHARMACEUTIQUE: [], // Pas d'équivalent direct
  EDUCATION_ET_FORMATION: [], // Pas d'équivalent direct
  SERVICES_FINANCIERS_ET_ASSURANCES: [], // Pas d'équivalent direct
  IMMOBILIER_ET_CONSTRUCTION: [
    'ADMINISTRATEURS_ET_AGENTS_IMMOBILIERS', // Administrateurs et Agents Immobiliers
    'BTP', // BTP
    'PROMOTEUR_IMMOBILIER' // Promoteur Immobilier
  ],
  ADMINISTRATION_ET_SERVICES_PUBLICS: [], // Pas d'équivalent direct
  ENVIRONNEMENT_ET_ECOLOGIE: [], // Pas d'équivalent direct
  RECHERCHE_ET_INNOVATION: [], // Pas d'équivalent direct
  INGENIERIE_ET_ETUDES: [
    'ARCHITECTE', // Architecte
    'CARTOGRAPHIE_TOPOGRAPHIE', // Cartographie / Topographie
    'GEOMETRES_EXPERTS', // Géomètres-Experts
    'INGENIEUR_CONSEIL' // Ingénieur-Conseil
  ],
  URBANISME_ET_AMENAGEMENT: ['URBANISTE'], // Urbaniste
};

// Type pour les données complètes de l'entreprise
interface BusinessData {
  personalInfo?: PersonalInfo;
  companyInfo?: CompanyInfo;
  participants?: Participant[];
}

// Types pour la génération PDF
type GenArgs = {
  companyInfo: Partial<CompanyInfo>;
  personalInfo: Partial<PersonalInfo>;
  template: { title: string };
  domaineReglemente: string;
};

// Fonction pour générer le document PDF de demande d'autorisation au format officiel (2 pages)
function generateAutorisationPDF({
  companyInfo,
  personalInfo,
  template,
  domaineReglemente,
}: GenArgs) {
  const doc = new jsPDF({ unit: "mm", format: "a4" });
  doc.setFont("helvetica", "normal");

  // ===== Helpers =====
  const MARGIN_L = 20;
  const MARGIN_R = 190;
  const WIDTH = MARGIN_R - MARGIN_L;
  const LINE = 5;

  let y = 20;
  let isFirstPage = true;

  const addPageIfNeeded = (inc = 0) => {
    const need = y + inc > 285;
    if (need) {
      doc.addPage();
      y = 20;
      isFirstPage = false;
    }
  };

  const text = (t: string, x: number, yPos = y, opt?: any) => {
    doc.text(t, x, yPos, opt);
  };

  const underline = (label: string, x: number, yPos = y) => {
    const w = doc.getTextWidth(label);
    text(label, x, yPos);
    doc.line(x, yPos + 0.7, x + w, yPos + 0.7);
  };

  const spaced = (t: string) => t.split("").join(" ");

  const wrap = (t: string, width = WIDTH) => doc.splitTextToSize(t, width);

  const dottedLine = (x1: number, y1: number, x2: number) => {
    const dash = 1.5,
      gap = 1.2;
    let dx = x2 - x1;
    const step = dash + gap;
    const n = Math.floor(dx / step);
    for (let i = 0; i < n; i++) {
      const sx = x1 + i * step;
      doc.line(sx, y1, sx + dash, y1);
    }
    // fin
    const remaining = dx - n * step;
    if (remaining > 0.5) {
      const sx = x1 + n * step;
      doc.line(sx, y1, Math.min(x2, sx + remaining), y1);
    }
  };

  const labeledLine = (
    label: string,
    value: string,
    x = MARGIN_L,
    lineW = 150
  ) => {
    const labW = doc.getTextWidth(label);
    text(label, x, y);
    const start = x + labW + 2;
    const end = x + lineW;
    dottedLine(start, y, end);
    if (value && value !== "Non spécifié") {
      text(value, start + 1, y - 0.8);
    }
    y += 6;
  };

  const bullets = (lines: string[], x = MARGIN_L + 5, indent = 4, lh = 4) => {
    lines.forEach((ln) => {
      const wrapped = wrap(ln, WIDTH - (x - MARGIN_L) - 2);
      wrapped.forEach((wl: string, idx: number) => {
        // Ne pas ajouter de page pour la première page, forcer à rester
        if (isFirstPage) {
          // Réduire l'espacement si on approche du bas de page
          if (y > 270) {
            lh = 3.5;
          }
        } else {
          addPageIfNeeded(lh);
        }
        if (idx === 0) text("•", x, y);
        text(wl, x + indent, y);
        y += lh;
      });
    });
  };

  // ===== PAGE 1 =====
  doc.setFontSize(12);
  doc.setFont("helvetica", "bold");
  text("Promoteur", MARGIN_L, y);
  text("Bamako, le", 150, y);
  y += 18;

  doc.setFont("helvetica", "normal");
  doc.setFontSize(10);

  labeledLine("Nom ou Raison Sociale :", companyInfo?.nom || "", MARGIN_L, 170);
  labeledLine("Nationalité :", personalInfo?.nationality || "", MARGIN_L, 170);
  labeledLine("Adresse :", personalInfo?.address || "", MARGIN_L, 170);
  y += 3;

  // Timbre (petit cadre à gauche)
  doc.rect(MARGIN_L, y, 35, 22);
  doc.setFontSize(8);
  text("Timbre", MARGIN_L + 6, y + 8);
  text("200 F CFA", MARGIN_L + 6, y + 15);

  // En-tête centré
  doc.setFont("helvetica", "bold");
  doc.setFontSize(12);
  text("A Monsieur le Directeur Général", 105, y + 4, { align: "center" });
  text("de l'Agence pour la Promotion des", 105, y + 12, { align: "center" });
  text("Investissements au Mali", 105, y + 20, { align: "center" });

  doc.setFont("helvetica", "normal");
  doc.setFontSize(12);
  text(spaced("B A M A K O"), 105, y + 35, { align: "center" });
  y += 48;

  // Trait de séparation
  doc.line(MARGIN_L, y, MARGIN_R, y);
  y += 8;

  // Objet (avec "Objet" en gras + soulignés sur les mots comme le modèle)
  doc.setFontSize(10);
  doc.setFont("helvetica", "bold");
  text("Objet", MARGIN_L, y);
  doc.setFont("helvetica", "normal");
  text(": demande ", MARGIN_L + 16, y);

  // morceaux soulignés
  underline("d'autorisation", MARGIN_L + 16 + doc.getTextWidth(": demande ") , y);
  const xAfter1 =
    MARGIN_L + 16 + doc.getTextWidth(": demande ") + doc.getTextWidth("d'autorisation") + 2;
  text(" ", xAfter1, y);
  underline("d'exercice", xAfter1 + 1, y);

  const afterEx = xAfter1 + 1 + doc.getTextWidth("d'exercice") + 2;
  text(" en qualité", afterEx, y);

  y += 6;
  doc.setFont("helvetica", "bold");
  underline(
    `d'${template.title}` ,
    MARGIN_L,
    y
  );
  doc.setFont("helvetica", "normal");
  text(" ou d'Agent immobilier.", MARGIN_L + doc.getTextWidth(`d'${template.title}` ) + 2, y);
  y += 10;

  // Corps
  text("Monsieur le Directeur général,", MARGIN_L, y);
  y += 7;
  const corps =
    `J'ai l'honneur de solliciter auprès de votre haute bienveillance l'octroi d'une autorisation d'exercice en qualité d'${template.title} ou d'Agent immobilier.` ;
  wrap(corps).forEach((l: string) => {
    addPageIfNeeded(LINE);
    text(l, MARGIN_L, y);
    y += LINE;
  });
  y += 3;

  // Numérotation 1–3
  doc.setFont("helvetica", "normal");
  text("1. Nom ou Raison sociale :", MARGIN_L, y);
  labeledLine("", companyInfo?.nom || "", MARGIN_L + 55, 180);

  text("2. Adresse ou Siège social :", MARGIN_L, y);
  labeledLine("", personalInfo?.address || "", MARGIN_L + 60, 180);

  text("3. Forme juridique :", MARGIN_L, y);
  labeledLine("", companyInfo?.formeJuridique || "", MARGIN_L + 40, 180);

  // Politesse
  const politesse =
    "Veuillez agréer, Monsieur le Directeur Général, l'expression de mes sentiments les plus distingués.";
  y += 2;
  wrap(politesse).forEach((l: string) => {
    addPageIfNeeded(LINE);
    text(l, MARGIN_L, y);
    y += LINE;
  });
  y += 3;

  // Pièces jointes (titre)
  doc.setFont("helvetica", "bold");
  text("Pièces jointes", MARGIN_L, y);
  doc.setFont("helvetica", "normal");
  text(" :", MARGIN_L + doc.getTextWidth("Pièces jointes") + 1.2, y);
  y += 5;

  // 1. Personnes physiques
  doc.setFont("helvetica", "bold");
  text("1. Pour les personnes physiques :", MARGIN_L + 5, y);
  y += 4;
  doc.setFont("helvetica", "normal");
  doc.setFontSize(9);
  bullets(
    [
      "une demande timbrée;",
      "un extrait de l'acte de naissance ou du jugement supplétif en tenant lieu;",
      "un certificat de nationalité;",
      "deux photos d'identité du promoteur;",
      "une copie certifiée conforme du diplôme ou une attestation délivrée par l'employeur;",
      "un extrait du casier judiciaire datant de moins de trois mois;",
      "un document justifiant le versement de la caution de garantie délivrée par la Caisse de Dépôts et de Consignation ou un certificat d'inscription hypothécaire délivré par l'autorité compétente ;",
      "une police d'assurance de responsabilité civile professionnelle.",
    ],
    MARGIN_L + 5
  );

  // 2. Personnes morales (début page 1)
  doc.setFont("helvetica", "bold");
  text("2. Personnes morales :", MARGIN_L + 5, y);
  y += 4;
  doc.setFont("helvetica", "normal");
  bullets(
    [
      "Demande timbrée;",
      "Statuts de la société (copies authentiques);",
      "Diplôme ou certificat établissant la qualification du responsable dirigeant;",
      "Liste nominative du personnel d'encadrement;",
      "Demande de déclaration d'ouverture d'établissement dûment remplie par l'Agence Nationale pour l'Emploi;",
      "Liste des immobilisations corporelles de l'entreprise accompagnée d'un rapport d'évaluation établi par un expert industriel agréé.",
    ],
    MARGIN_L + 5
  );

  // ===== PAGE 2 =====
  doc.addPage();
  isFirstPage = false;
  doc.setFont("helvetica", "normal");
  doc.setFontSize(12);
  text("2", 190, 20);
  y = 35;

  doc.setFontSize(10);
  doc.setFont("helvetica", "bold");
  text("2. Pour les personnes morales :", MARGIN_L, y);
  doc.setFont("helvetica", "normal");
  text("º", 130, y); // petit symbole comme sur l'image
  y += 8;

  doc.setFontSize(9);
  bullets(
    [
      "une demande timbrée;",
      "les copies authentiques des statuts ;",
      "les extraits de l'acte de naissance, certificat de nationalité et du casier judiciaire datant de moins de 3 mois, le curriculum vitae, deux photos d'identité et la copie certifiée conforme du diplôme ou du certificat professionnel du responsable dirigeant ;",
      "un document justifiant le versement de la caution de garantie délivrée par la Caisse de Dépôts et de Consignation ou un certificat d'inscription hypothécaire délivré par l'autorité compétente ;",
      "une police d'assurance de responsabilité civile professionnelle.",
    ],
    MARGIN_L + 5
  );

  y += 4;
  doc.setFont("helvetica", "bold");
  text("Réservé à l'Administration", MARGIN_L, y);
  y += 8;

  // Cadre Code / Avis
  doc.rect(MARGIN_L, y, WIDTH, 35);
  doc.setFont("helvetica", "normal");
  doc.setFontSize(10);
  text("Code :", MARGIN_L + 5, y + 12);
  text("Avis :", MARGIN_L + 5, y + 27);
  y += 45;

  // Signature
  doc.setFont("helvetica", "bold");
  text("Signature du Promoteur", 130, y);
  y += 10;

  // NB1 (NUI dans ton code)
  doc.setFont("helvetica", "bold");
  doc.setFontSize(9);
  underline(
    "NB1: Montant de la caution de garantie et de la valeur de l'immeuble affecté en hypothèque",
    MARGIN_L,
    y
  );
  y += 6;
  doc.setFont("helvetica", "normal");
  const nb1a =
    "Le montant de la caution de garantie est de cinq millions (5 000 000) de F CFA pour l'Administrateur de biens immobiliers et de deux millions cinq cent mille (2 500 000) F CFA pour l'Agent immobilier.";
  wrap(nb1a).forEach((l: string) => {
    addPageIfNeeded(LINE);
    text(l, MARGIN_L, y);
    y += LINE;
  });
  const nb1b =
    "La valeur de l'immeuble affecté en hypothèque doit être égale ou supérieure à quinze millions (15 000 000) de F CFA pour chacune des professions.";
  wrap(nb1b).forEach((l: string) => {
    addPageIfNeeded(LINE);
    text(l, MARGIN_L, y);
    y += LINE;
  });
  y += 4;

  // NB2 (frais de dépôt)
  doc.setFont("helvetica", "bold");
  text(
    "NB2 : Frais de dépôt : Cent vingt-cinq mille (125 000) francs CFA (date d'entrée en vigueur le 02/01/2023)",
    MARGIN_L,
    y
  );
  y += 7;

  // (optionnel) tableau des frais par catégorie comme sur ta maquette finale
  doc.setFont("helvetica", "bold");
  text(
    "NB : Frais de dépôt en francs CFA par Catégorie",
    MARGIN_L,
    y
  );
  y += 6;
  doc.setFont("helvetica", "normal");
  text(
    "G = 50 000 ; F = 100 000 ; E = 300 000 ; D = 325 000 ; C = 350 000 ; B = 400 000 ; A = 450 000",
    MARGIN_L,
    y
  );

  // Sauvegarde
  const fileName = `Demande_Autorisation_${domaineReglemente}_${
    companyInfo?.nom || "Entreprise"
  }.pdf`;
  doc.save(fileName);
}

// Fonction wrapper pour maintenir la compatibilité
const generateAutorisationDocument = (domaineReglemente: DomaineActivites, businessData: BusinessData) => {
  const template = AUTORISATION_TEMPLATES[domaineReglemente];
  if (!template) {
    alert('Template de demande non trouvé pour ce domaine');
    return;
  }

  generateAutorisationPDF({
    companyInfo: businessData.companyInfo || {},
    personalInfo: businessData.personalInfo || {},
    template: template,
    domaineReglemente: domaineReglemente,
  });
};

// Nouvelle structure pour les participants selon l'API backend
export interface Participant {
  personId?: string; // Optionnel car généré automatiquement
  role: EntrepriseRole;
  pourcentageParts: number;
  dateDebut: string; // Format ISO date
  dateFin: string;   // Format ISO date
  // Champs personnels pour la création (obligatoires maintenant)
  nom: string;
  prenom: string;
  telephone?: string;
  email?: string;
  dateNaissance?: string;
  lieuNaissance?: string;
  nationnalite?: string;
  sexe?: string;
  situationMatrimoniale?: string;
  civilite?: string;
  // Champs pour les documents
  typePiece?: string;
  numeroPiece?: string;
  documentFile?: File;
  documentUrl?: string;
  // Champ spécifique pour le casier judiciaire des gérants
  casierJudiciaireFile?: File;
  // Champ spécifique pour l'acte de mariage des gérants
  acteMariageFile?: File;
  // Champ spécifique pour l'extrait de naissance des gérants
  extraitNaissanceFile?: File;
  // Champ spécifique pour la déclaration sur l'honneur des gérants
  declarationHonneurFile?: File;
  // Champs de localisation
  divisionId?: string;
  division_id?: string;
  divisionCode?: string;
  localite?: string;
}

// Structure pour la requête de création d'entreprise selon l'API backend
interface EntrepriseRequest {
  nom: string;
  sigle: string;
  capitale: string;
  activiteSecondaire?: string;
  adresseDifferentIdentite: boolean;
  extraitJudiciaire: boolean;
  autorisationGerant: boolean;
  autorisationExercice: boolean;
  importExport: boolean;
  statutSociete: boolean;
  typeEntreprise: TypeEntreprise;
  statutCreation: StatutCreation;
  etapeValidation: EtapeValidation;
  formeJuridique: FormeJuridique;
  domaineActivite: DomaineActivites;
  divisionCode: string;
  participants: Participant[];
}

// Structure pour les informations personnelles (étape 1)
interface PersonalInfo {
  civility: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  birthDate: string;
  birthPlace: string;
  nationality: string;
  sexe: string;
  situationMatrimoniale: string;
  typePersonne: TypePersonne;
  idType: string;
  idNumber: string;
  idExpiryDate: string;
  idIssuedAt: string;
  address: string;
  city: string;
  region: string;
  localite: string; // Champ localité
  divisionId: string; // ID de la division administrative
  position: string;
  powers: string[];
  roleId: number;
  idDocument?: File | null;
  idDocumentName?: string;
}

// Structure pour les informations de l'entreprise (étape 2)
interface CompanyInfo {
  nom: string;
  sigle: string;
  capitale: string;
  activiteSecondaire?: string;
  typeEntreprise: TypeEntreprise;
  formeJuridique: FormeJuridique;
  domaineActivite: DomaineActivites;
  domaineActiviteNr?: DomaineActiviteNr;
  divisionCode: string;
  adresseDifferentIdentite: boolean;
  extraitJudiciaire: boolean;
  autorisationGerant: boolean;
  autorisationExercice: boolean;
  importExport: boolean;
  statutSociete: boolean;
  statutCreation: StatutCreation;
  etapeValidation: EtapeValidation;
  regionId?: string;
  cercleId?: string;
  arrondissementId?: string;
  communeId?: string;
}

interface Documents {
  statutes: File | null;
  statutesName: string;
  needsStatutesDrafting: boolean;
  statutesPages: number;
  commerceRegistry: File | null;
  commerceRegistryName: string;
  hasCommerceRegistry: boolean;
  residenceCertificate: File | null;
  residenceCertificateName: string;
}

interface Payment {
  method?: 'moov' | 'orange' | 'wave' | 'card' | '';
  phoneNumber?: string;
  cardNumber?: string;
  cardExpiry?: string;
  cardCvv?: string;
  cardName?: string;
  totalAmount?: number;
  breakdown?: {
    statutesDrafting?: number;
    registrationFees?: number;
    serviceFees?: number;
  };
}

// Structure globale pour toutes les données du processus de création
export interface BusinessCreationData {
  // Étape 1: Informations personnelles
  personalInfo: PersonalInfo & {
    isForSelf: boolean;
    hasDifferentAddress: boolean;
    hasCriminalRecord: boolean;
    isMarried: boolean;
    allowsMultipleManagers: boolean;
    requiresExerciseAuthorization: boolean;
    willImportExport: boolean;
  };
  // Étape 2: Informations de l'entreprise
  companyInfo: CompanyInfo;
  // Étape 3: Participants/Associés
  participants: Participant[];
  // Étape 4: Documents
  documents?: Documents;
  // ID de la personne fondatrice (créée ou mise à jour à l'étape 1)
  founderId?: string;
  // Étape 5: Paiement
  payment?: Payment;
}

// Composant pour la sélection de localisation personnelle
const PersonalLocationStep: React.FC<{
  data: BusinessCreationData,
  updateData: (field: keyof BusinessCreationData, value: any) => void,
  isReadOnly?: boolean
}> = ({ data, updateData, isReadOnly = false }) => {
  // États pour les divisions personnelles
  const [personalRegions, setPersonalRegions] = useState<any[]>([]);
  const [personalCercles, setPersonalCercles] = useState<any[]>([]);
  const [personalArrondissements, setPersonalArrondissements] = useState<any[]>([]);
  const [personalCommunes, setPersonalCommunes] = useState<any[]>([]);
  const [personalQuartiers, setPersonalQuartiers] = useState<any[]>([]);

  // États pour les sélections personnelles
  const [personalSelectedRegionId, setPersonalSelectedRegionId] = useState<string>('');
  const [personalSelectedCercleId, setPersonalSelectedCercleId] = useState<string>('');
  const [personalSelectedArrondissementId, setPersonalSelectedArrondissementId] = useState<string>('');
  const [personalSelectedCommuneId, setPersonalSelectedCommuneId] = useState<string>('');
  const [personalSelectedQuartierId, setPersonalSelectedQuartierId] = useState<string>('');

  // États pour les codes personnels
  const [personalSelectedRegionCode, setPersonalSelectedRegionCode] = useState<string>('');
  const [personalSelectedCercleCode, setPersonalSelectedCercleCode] = useState<string>('');
  const [personalSelectedArrondissementCode, setPersonalSelectedArrondissementCode] = useState<string>('');
  const [personalSelectedCommuneCode, setPersonalSelectedCommuneCode] = useState<string>('');
  const [personalSelectedQuartierCode, setPersonalSelectedQuartierCode] = useState<string>('');

  // Charger les régions au montage
  useEffect(() => {
    let mounted = true;
    divisionService.getRegions().then((res: any[]) => {
      if (mounted) setPersonalRegions(res || []);
    }).catch(() => {});
    return () => { mounted = false; };
  }, []);

  // Charger cercles quand personalSelectedRegionId change
  useEffect(() => {
    let mounted = true;
    if (personalSelectedRegionId) {
      // Vérifier si c'est Bamako District (structure différente)
      const selectedRegion = personalRegions.find(r => r.id === personalSelectedRegionId);
      const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
      
      if (isBamakoDistrict) {
        // Pour Bamako District, charger directement les arrondissements
        console.log('[Bamako District] Chargement direct des arrondissements');
        console.log('[Bamako District] Region ID envoyé:', personalSelectedRegionId);
        console.log('[Bamako District] Région sélectionnée:', selectedRegion);
        // Debug: Explorer la structure de Bamako
        Promise.all([
          divisionService.getChildrenByRegion(personalSelectedRegionId),
          divisionService.searchBamakoDivisions(),
          divisionService.getAllArrondissements()
        ]).then(([children, bamakoDivisions, allArrondissements]) => {
          console.log('[Bamako District] Enfants directs:', children);
          console.log('[Bamako District] Toutes les divisions Bamako:', bamakoDivisions);
          console.log('[Bamako District] Tous les arrondissements:', allArrondissements);
          
          // Debug: Analyser quelques arrondissements pour comprendre la structure
          console.log('[Bamako District] Analyse des premiers arrondissements:');
          allArrondissements.slice(0, 10).forEach((arr: any, index: number) => {
            console.log(`[${index}] Nom: "${arr.nom}", Parent: "${arr.parent?.nom || 'Aucun'}", Type Parent: "${arr.parent?.divisionType || 'Aucun'}"`);
          });
          
          // Rechercher les arrondissements qui pourraient être de Bamako
          // Essayons plusieurs stratégies de filtrage
          
          // Stratégie 1: Arrondissements avec "premier", "deuxième", etc. (typique de Bamako)
          const strategy1 = allArrondissements.filter((arr: any) => {
            const nom = arr.nom?.toLowerCase() || '';
            return nom.includes('premier') || nom.includes('deuxième') || nom.includes('troisième') || 
                   nom.includes('quatrième') || nom.includes('cinquième') || nom.includes('sixième') || 
                   nom.includes('septième') || nom.includes('deuxieme') || nom.includes('troisieme') || 
                   nom.includes('quatrieme') || nom.includes('cinquieme') || nom.includes('sixieme') || 
                   nom.includes('septieme');
          });
          
          // Stratégie 2: Arrondissements dont le parent est dans bamakoDivisions
          const strategy2 = allArrondissements.filter((arr: any) => 
            bamakoDivisions.some((bd: any) => bd.id === arr.parent?.id)
          );
          
          // Stratégie 3: Arrondissements avec parent contenant "bamako"
          const strategy3 = allArrondissements.filter((arr: any) => 
            arr.parent?.nom?.toLowerCase().includes('bamako')
          );
          
          console.log('[Bamako District] Stratégie 1 (Premier, Deuxième...):', strategy1.length, 'arrondissements');
          strategy1.forEach((arr: any, index: number) => {
            console.log(`  [${index + 1}] ${arr.nom} (Code: ${arr.code})`);
          });
          console.log('[Bamako District] Stratégie 2 (Parent dans bamakoDivisions):', strategy2.length, 'arrondissements');
          console.log('[Bamako District] Stratégie 3 (Parent contient bamako):', strategy3.length, 'arrondissements');
          
          // Utiliser la stratégie qui donne le plus de résultats
          let bamakoArrondissements = strategy1;
          if (strategy2.length > bamakoArrondissements.length) bamakoArrondissements = strategy2;
          if (strategy3.length > bamakoArrondissements.length) bamakoArrondissements = strategy3;
          
          console.log('[Bamako District] Arrondissements de Bamako sélectionnés:', bamakoArrondissements.length);
          
          // Vérification: Bamako devrait avoir 7 arrondissements
          if (bamakoArrondissements.length !== 7) {
            console.warn(`[Bamako District] ATTENTION: ${bamakoArrondissements.length} arrondissements trouvés au lieu de 7 attendus`);
            console.warn('[Bamako District] Arrondissements manquants possibles: Vérifiez si le Septième Arrondissement est présent');
          } else {
            console.log('[Bamako District] ✅ Tous les 7 arrondissements de Bamako sont présents');
          }
          
          if (mounted) {
            setPersonalCercles([]); // Pas de cercles pour Bamako
            setPersonalArrondissements(bamakoArrondissements || []);
            console.log('[Bamako District] Arrondissements chargés:', bamakoArrondissements?.length || 0);
          }
        }).catch((error: any) => {
          console.error('[Bamako District] Erreur chargement arrondissements:', error);
        });
      } else {
        // Structure classique : charger les cercles
        divisionService.getCerclesByRegion(personalSelectedRegionId).then((res: any[]) => {
          if (mounted) {
            setPersonalCercles(res || []);
            // Réinitialiser les listes suivantes
            setPersonalArrondissements([]);
            setPersonalCommunes([]);
            setPersonalQuartiers([]);
            setPersonalSelectedCercleId('');
            setPersonalSelectedArrondissementId('');
            setPersonalSelectedCommuneId('');
            setPersonalSelectedQuartierId('');
            console.log(`[Région classique] ${res?.length || 0} cercles chargés`);
            console.log('[DEBUG] Premiers cercles:', res?.slice(0, 3));
          }
        }).catch(() => {});
      }
    } else {
      // Réinitialiser toutes les listes
      setPersonalCercles([]);
      setPersonalArrondissements([]);
      setPersonalCommunes([]);
      setPersonalQuartiers([]);
      setPersonalSelectedCercleId('');
      setPersonalSelectedArrondissementId('');
      setPersonalSelectedCommuneId('');
      setPersonalSelectedQuartierId('');
    }
    return () => { mounted = false; };
  }, [personalSelectedRegionId, personalRegions]);

  // Charger arrondissements quand personalSelectedCercleId change
  useEffect(() => {
    let mounted = true;
    if (personalSelectedCercleId) {
      divisionService.getArrondissementsByCercle(personalSelectedCercleId).then((res: any[]) => {
        if (mounted) {
          setPersonalArrondissements(res || []);
          // Réinitialiser les listes suivantes
          setPersonalCommunes([]);
          setPersonalQuartiers([]);
          setPersonalSelectedArrondissementId('');
          setPersonalSelectedCommuneId('');
          setPersonalSelectedQuartierId('');
          console.log(`[Cercle] ${res?.length || 0} arrondissements chargés`);
        }
      }).catch(() => {});
    } else {
      setPersonalArrondissements([]);
      setPersonalCommunes([]);
      setPersonalQuartiers([]);
      setPersonalSelectedArrondissementId('');
      setPersonalSelectedCommuneId('');
      setPersonalSelectedQuartierId('');
    }
    return () => { mounted = false; };
  }, [personalSelectedCercleId]);

  // Charger communes quand personalSelectedArrondissementId change
  useEffect(() => {
    let mounted = true;
    if (personalSelectedArrondissementId) {
      // Vérifier si c'est Bamako District
      const selectedRegion = personalRegions.find(r => r.id === personalSelectedRegionId);
      const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
      
      if (isBamakoDistrict) {
        // Pour Bamako District, charger directement les quartiers depuis l'arrondissement
        console.log('[Bamako District] Chargement direct des quartiers depuis arrondissement');
        console.log('[Bamako District] Arrondissement ID:', personalSelectedArrondissementId);
        
        // Pour Bamako District, essayer d'abord la relation directe, puis la solution par code
        console.log('[Bamako District] Tentative 1: Relation directe arrondissement->quartiers');
        divisionService.getQuartiersByArrondissement(personalSelectedArrondissementId).then((quartiers: any[]) => {
          console.log('[Bamako District] Quartiers par relation directe:', quartiers?.length || 0);
          
          if (quartiers && quartiers.length > 0) {
            // Relation directe fonctionne
            if (mounted) {
              setPersonalCommunes([]);
              setPersonalQuartiers(quartiers);
              console.log('[Bamako District] Quartiers chargés par relation directe:', quartiers.length);
            }
          } else {
            // Relation directe ne fonctionne pas, essayer par code
            console.log('[Bamako District] Tentative 2: Recherche par code d\'arrondissement');
            return divisionService.getQuartiersByArrondissementCode(personalSelectedArrondissementId);
          }
        }).then((quartiersParCode: any[]) => {
          if (quartiersParCode && quartiersParCode.length > 0) {
            console.log('[Bamako District] Quartiers par code:', quartiersParCode.length);
            if (mounted) {
              setPersonalCommunes([]);
              setPersonalQuartiers(quartiersParCode);
              console.log('[Bamako District] Quartiers chargés par code:', quartiersParCode.length);
            }
          } else {
            console.log('[Bamako District] Aucun quartier trouvé avec les deux méthodes');
            if (mounted) {
              setPersonalCommunes([]);
              setPersonalQuartiers([]);
            }
          }
        }).catch((error: any) => {
          console.error('[Bamako District] Erreur chargement quartiers:', error);
        });
      } else {
        // Structure classique : charger les communes
        divisionService.getCommunesByArrondissement(personalSelectedArrondissementId).then((res: any[]) => {
          if (mounted) setPersonalCommunes(res || []);
        }).catch(() => {});
      }
    } else {
      setPersonalCommunes([]);
      setPersonalSelectedCommuneId('');
      setPersonalSelectedQuartierId('');
    }
    return () => { mounted = false; };
  }, [personalSelectedArrondissementId, personalRegions, personalSelectedRegionId]);

  // Charger quartiers quand personalSelectedCommuneId change
  useEffect(() => {
    let mounted = true;
    if (personalSelectedCommuneId) {
      divisionService.getQuartiersByCommune(personalSelectedCommuneId).then((res: any[]) => {
        if (mounted) setPersonalQuartiers(res || []);
      }).catch(() => {});
    } else {
      setPersonalQuartiers([]);
      setPersonalSelectedQuartierId('');
    }
    return () => { mounted = false; };
  }, [personalSelectedCommuneId]);

  // Fonction pour gérer la sélection d'une division via la recherche
  const handleDivisionSearch = async (division: any) => {
    console.log('🔍 Division sélectionnée via recherche:', division);
    
    try {
      // Construire la hiérarchie complète en remontant les parents
      const hierarchy = await buildDivisionHierarchy(division);
      console.log('📋 Hiérarchie construite:', hierarchy);
      
      // Appliquer la hiérarchie aux sélecteurs
      applyDivisionHierarchy(hierarchy);
      
    } catch (error) {
      console.error('Erreur lors de la construction de la hiérarchie:', error);
    }
  };

  // Construire la hiérarchie complète d'une division
  const buildDivisionHierarchy = async (division: any) => {
    const hierarchy: any = {
      region: null,
      cercle: null,
      arrondissement: null,
      commune: null,
      quartier: null
    };

    let current = division;
    
    // Remonter la hiérarchie
    while (current) {
      switch (current.divisionType) {
        case 'REGION':
          hierarchy.region = current;
          break;
        case 'CERCLE':
          hierarchy.cercle = current;
          break;
        case 'ARRONDISSEMENT':
          hierarchy.arrondissement = current;
          break;
        case 'COMMUNE':
          hierarchy.commune = current;
          break;
        case 'QUARTIER':
          hierarchy.quartier = current;
          break;
      }
      
      // Remonter au parent
      current = current.parent;
    }

    return hierarchy;
  };

  // Appliquer la hiérarchie aux sélecteurs
  const applyDivisionHierarchy = (hierarchy: any) => {
    // Région
    if (hierarchy.region) {
      setPersonalSelectedRegionId(hierarchy.region.id);
      setPersonalSelectedRegionCode(hierarchy.region.code);
    }
    
    // Cercle
    if (hierarchy.cercle) {
      setPersonalSelectedCercleId(hierarchy.cercle.id);
      setPersonalSelectedCercleCode(hierarchy.cercle.code);
    }
    
    // Arrondissement
    if (hierarchy.arrondissement) {
      setPersonalSelectedArrondissementId(hierarchy.arrondissement.id);
      setPersonalSelectedArrondissementCode(hierarchy.arrondissement.code);
    }
    
    // Commune
    if (hierarchy.commune) {
      setPersonalSelectedCommuneId(hierarchy.commune.id);
      setPersonalSelectedCommuneCode(hierarchy.commune.code);
    }
    
    // Quartier
    if (hierarchy.quartier) {
      setPersonalSelectedQuartierId(hierarchy.quartier.id);
      setPersonalSelectedQuartierCode(hierarchy.quartier.code);
    }

    // Mettre à jour le divisionId avec la division la plus précise
    const finalDivision = hierarchy.quartier || hierarchy.commune || hierarchy.arrondissement || hierarchy.cercle || hierarchy.region;
    if (finalDivision) {
      updateData('personalInfo', { 
        ...data.personalInfo, 
        divisionId: finalDivision.id,
        localite: finalDivision.nom 
      });
    }
  };

  return (
    <div className="space-y-6">
      {/* Champ de recherche avec filtre */}
      <div className="bg-gradient-to-r from-mali-emerald/5 to-mali-gold/5 p-4 rounded-xl border border-mali-emerald/20">
        <div className="flex items-center space-x-3 mb-3">
          <span className="text-2xl">🔍</span>
          <div>
            <h3 className="font-semibold text-mali-dark">Recherche rapide</h3>
            <p className="text-sm text-gray-600">Tapez le nom d'une localisation pour la trouver rapidement</p>
          </div>
        </div>
        
        <DivisionSearchInput
          placeholder="Rechercher une région, cercle, arrondissement, commune ou quartier..."
          onSelect={handleDivisionSearch}
          disabled={isReadOnly}
          className="bg-white"
        />
        
        <p className="text-xs text-gray-500 mt-2">
          💡 Astuce : Commencez à taper et sélectionnez dans la liste. La hiérarchie se remplira automatiquement.
        </p>
      </div>

      {/* Sélecteurs hiérarchiques classiques */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* Région */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Région</label>
        <select
          value={personalSelectedRegionId}
          onChange={isReadOnly ? undefined : (e) => {
            const regionId = e.target.value;
            const region = personalRegions.find(r => r.id === regionId);
            const regionCode = region?.code || '';
            
            setPersonalSelectedRegionId(regionId);
            setPersonalSelectedRegionCode(regionCode);
            
            // Reset des niveaux inférieurs
            setPersonalSelectedCercleId(''); setPersonalSelectedCercleCode('');
            setPersonalSelectedArrondissementId(''); setPersonalSelectedArrondissementCode('');
            setPersonalSelectedCommuneId(''); setPersonalSelectedCommuneCode('');
            setPersonalSelectedQuartierId(''); setPersonalSelectedQuartierCode('');
            
            // Mettre à jour le divisionId dans personalInfo (utiliser l'ID, pas le code)
            const divisionId = regionId || '';
            updateData('personalInfo', { ...data.personalInfo, divisionId });
          }}
          disabled={isReadOnly}
          className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:border-transparent transition-all duration-500 ${
            isReadOnly 
              ? 'border-gray-200 bg-gray-50 text-gray-500 cursor-not-allowed' 
              : 'border-gray-300 focus:ring-mali-emerald'
          }`}
        >
          <option value="">Sélectionnez une région</option>
          {personalRegions.map((r: any) => (
            <option key={r.id} value={r.id}>{r.nom}</option>
          ))}
        </select>
      </div>

      {/* Cercle - Masqué pour Bamako District */}
      {(() => {
        const selectedRegion = personalRegions.find(r => r.id === personalSelectedRegionId);
        const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
        
        if (isBamakoDistrict) {
          return null; // Pas de cercle pour Bamako District
        }
        
        return (
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Cercle</label>
            <select
              value={personalSelectedCercleId}
              onChange={isReadOnly ? undefined : (e) => {
                const cercleId = e.target.value;
                const cercle = personalCercles.find(c => c.id === cercleId);
                const cercleCode = cercle?.code || '';
                
                setPersonalSelectedCercleId(cercleId);
                setPersonalSelectedCercleCode(cercleCode);
                
                // Reset des niveaux inférieurs
                setPersonalSelectedArrondissementId(''); setPersonalSelectedArrondissementCode('');
                setPersonalSelectedCommuneId(''); setPersonalSelectedCommuneCode('');
                setPersonalSelectedQuartierId(''); setPersonalSelectedQuartierCode('');
                
                // Mettre à jour le divisionId dans personalInfo (utiliser l'ID, pas le code)
                const divisionId = cercleId || personalSelectedRegionId || '';
                updateData('personalInfo', { ...data.personalInfo, divisionId });
              }}
              disabled={(() => {
                const disabled = isReadOnly || !personalSelectedRegionId;
                console.log('[DEBUG] Select cercle - isReadOnly:', isReadOnly, 'personalSelectedRegionId:', personalSelectedRegionId, 'disabled:', disabled);
                return disabled;
              })()}
              className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:border-transparent transition-all duration-500 ${
                isReadOnly || !personalSelectedRegionId
                  ? 'border-gray-200 bg-gray-50 text-gray-500 cursor-not-allowed' 
                  : 'border-gray-300 focus:ring-mali-emerald'
              }`}
            >
              <option value="">Sélectionnez un cercle</option>
              {personalCercles.map((c: any) => {
                console.log('[DEBUG] Cercle option:', c.id, c.nom);
                return <option key={c.id} value={c.id}>{c.nom}</option>;
              })}
            </select>
          </div>
        );
      })()}

      {/* Arrondissement */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Arrondissement</label>
        <select
          value={personalSelectedArrondissementId}
          onChange={isReadOnly ? undefined : (e) => {
            const arrondissementId = e.target.value;
            const arrondissement = personalArrondissements.find(a => a.id === arrondissementId);
            const arrondissementCode = arrondissement?.code || '';
            
            setPersonalSelectedArrondissementId(arrondissementId);
            setPersonalSelectedArrondissementCode(arrondissementCode);
            
            // Reset des niveaux inférieurs
            setPersonalSelectedCommuneId(''); setPersonalSelectedCommuneCode('');
            setPersonalSelectedQuartierId(''); setPersonalSelectedQuartierCode('');
            
            // Mettre à jour le divisionId dans personalInfo (utiliser l'ID, pas le code)
            // Pour Bamako District : arrondissementId || regionId
            // Pour les autres : arrondissementId || cercleId || regionId
            const selectedRegion = personalRegions.find(r => r.id === personalSelectedRegionId);
            const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
            const divisionId = isBamakoDistrict 
              ? (arrondissementId || personalSelectedRegionId || '')
              : (arrondissementId || personalSelectedCercleId || personalSelectedRegionId || '');
            updateData('personalInfo', { ...data.personalInfo, divisionId });
          }}
          disabled={(() => {
            if (isReadOnly) return true;
            const selectedRegion = personalRegions.find(r => r.id === personalSelectedRegionId);
            const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
            return isBamakoDistrict ? !personalSelectedRegionId : !personalSelectedCercleId;
          })()}
          className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:border-transparent transition-all duration-500 ${
            (() => {
              if (isReadOnly) return 'border-gray-200 bg-gray-50 text-gray-500 cursor-not-allowed';
              const selectedRegion = personalRegions.find(r => r.id === personalSelectedRegionId);
              const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
              const isDisabled = isBamakoDistrict ? !personalSelectedRegionId : !personalSelectedCercleId;
              return isDisabled;
            })()
              ? 'border-gray-200 bg-gray-50 text-gray-500 cursor-not-allowed' 
              : 'border-gray-300 focus:ring-mali-emerald'
          }`}
        >
          <option value="">Sélectionnez un arrondissement</option>
          {personalArrondissements.map((a: any) => (
            <option key={a.id} value={a.id}>{a.nom}</option>
          ))}
        </select>
      </div>

      {/* Commune - Masqué pour Bamako District */}
      {(() => {
        const selectedRegion = personalRegions.find(r => r.id === personalSelectedRegionId);
        const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
        
        if (isBamakoDistrict) {
          return null; // Pas de commune pour Bamako District
        }
        
        return (
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Commune</label>
            <select
              value={personalSelectedCommuneId}
              onChange={isReadOnly ? undefined : (e) => {
                const communeId = e.target.value;
                const commune = personalCommunes.find(c => c.id === communeId);
                const communeCode = commune?.code || '';
                
                setPersonalSelectedCommuneId(communeId);
                setPersonalSelectedCommuneCode(communeCode);
                
                // Reset des niveaux inférieurs
                setPersonalSelectedQuartierId(''); setPersonalSelectedQuartierCode('');
                
                // Mettre à jour le divisionId dans personalInfo (utiliser l'ID, pas le code)
                const divisionId = communeId || personalSelectedArrondissementId || personalSelectedCercleId || personalSelectedRegionId || '';
                updateData('personalInfo', { ...data.personalInfo, divisionId });
              }}
              disabled={isReadOnly || !personalSelectedArrondissementId}
              className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:border-transparent transition-all duration-500 ${
                isReadOnly || !personalSelectedArrondissementId
                  ? 'border-gray-200 bg-gray-50 text-gray-500 cursor-not-allowed' 
                  : 'border-gray-300 focus:ring-mali-emerald'
              }`}
            >
              <option value="">Sélectionnez une commune</option>
              {personalCommunes.map((c: any) => (
                <option key={c.id} value={c.id}>{c.nom}</option>
              ))}
            </select>
          </div>
        );
      })()}

      {/* Quartier */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Quartier</label>
        <select
          value={personalSelectedQuartierId}
          onChange={isReadOnly ? undefined : (e) => {
            const quartierId = e.target.value;
            const quartier = personalQuartiers.find(q => q.id === quartierId);
            const quartierCode = quartier?.code || '';
            
            setPersonalSelectedQuartierId(quartierId);
            setPersonalSelectedQuartierCode(quartierCode);
            
            // Mettre à jour le divisionId dans personalInfo (utiliser l'ID, pas le code)
            // Pour Bamako District : quartierId || arrondissementId || regionId
            // Pour les autres : quartierId || communeId || arrondissementId || cercleId || regionId
            const selectedRegion = personalRegions.find(r => r.id === personalSelectedRegionId);
            const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
            const divisionId = isBamakoDistrict 
              ? (quartierId || personalSelectedArrondissementId || personalSelectedRegionId || '')
              : (quartierId || personalSelectedCommuneId || personalSelectedArrondissementId || personalSelectedCercleId || personalSelectedRegionId || '');
            updateData('personalInfo', { ...data.personalInfo, divisionId });
          }}
          disabled={(() => {
            if (isReadOnly) return true;
            const selectedRegion = personalRegions.find(r => r.id === personalSelectedRegionId);
            const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
            return isBamakoDistrict ? !personalSelectedArrondissementId : !personalSelectedCommuneId;
          })()}
          className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:border-transparent transition-all duration-500 ${
            (() => {
              if (isReadOnly) return true;
              const selectedRegion = personalRegions.find(r => r.id === personalSelectedRegionId);
              const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
              return isBamakoDistrict ? !personalSelectedArrondissementId : !personalSelectedCommuneId;
            })()
              ? 'border-gray-200 bg-gray-50 text-gray-500 cursor-not-allowed' 
              : 'border-gray-300 focus:ring-mali-emerald'
          }`}
        >
          <option value="">Sélectionnez un quartier</option>
          {personalQuartiers.map((q: any) => (
            <option key={q.id} value={q.id}>{q.nom}</option>
          ))}
        </select>
      </div>

      {/* Localité */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Localité</label>
        <input
          type="text"
          value={data.personalInfo?.localite || ''}
          onChange={isReadOnly ? undefined : (e) => updateData('personalInfo', {
            ...data.personalInfo,
            localite: e.target.value
          })}
          readOnly={isReadOnly}
          className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:border-transparent transition-all duration-500 ${
            isReadOnly 
              ? 'border-gray-200 bg-gray-50 text-gray-500 cursor-not-allowed' 
              : 'border-gray-300 focus:ring-mali-emerald'
          }`}
          placeholder="Votre localité précise"
        />
      </div>
      </div>
    </div>
  );
};

// Étape 1 : Informations Personnelles
const PersonalInfoStep: React.FC<{
  data: BusinessCreationData, 
  updateData: (field: keyof BusinessCreationData, value: any) => void, 
  onNext: () => void,
  showForm: boolean,
  setShowForm: (show: boolean) => void
}> = ({ data, updateData, onNext, showForm, setShowForm }) => {
  const [isForSelf, setIsForSelf] = useState<boolean | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  // Récupérer l'utilisateur connecté
  const fetchCurrentUser = async () => {
    try {
      console.log('🔄 DÉBUT fetchCurrentUser - Récupération lieu de naissance et nationalité');
      // Réinitialiser la variable globale
      (window as any).userHasInitialLocationData = false;
      setIsLoading(true);
      setError('');
      
      // Récupérer l'utilisateur depuis le localStorage
      const currentUser = authAPI.getCurrentUser();
      console.log('🔍 Utilisateur actuel:', currentUser);
      
      if (currentUser && (currentUser.personne_id || currentUser.personneId)) {
        const personneId = currentUser.personne_id || currentUser.personneId;
        console.log('🔄 Récupération directe avec personne_id:', personneId);
        console.log('📋 Données currentUser disponibles:', currentUser);
        
        // Utiliser l'endpoint /api/v1/persons/personne_id pour récupérer les informations
        const personResponse = await authAPI.getPersonById(personneId);
        console.log('📋 Réponse de l\'API persons:', personResponse);
        
        if (personResponse && personResponse.success) {
          const personData = personResponse.data;
          
          // Debug: Afficher les champs lieuNaissance et nationnalite
          console.log('🔍 DEBUG - Champs récupérés depuis la DB:', {
            lieuNaissance: personData.lieuNaissance,
            nationnalite: personData.nationnalite,
            'nationnalite type': typeof personData.nationnalite,
            'nationnalite keys': personData.nationnalite ? Object.keys(personData.nationnalite) : 'null',
            allFields: Object.keys(personData)
          });
          
          // Mettre à jour les données du formulaire avec les informations de la table persons
          updateData('personalInfo', {
            ...data.personalInfo,
            firstName: personData.prenom || '',
            lastName: personData.nom || '',
            email: personData.email || currentUser.email || '',
            phone: personData.telephone1 || personData.telephone || '',
            civility: personData.civilite || 
                     (personData.sexe === 'MASCULIN' ? 'M.' : 
                      personData.sexe === 'FEMININ' ? 'Mme' : 
                      currentUser.civilite || ''),
            // Récupérer la date de naissance et le lieu de naissance
            birthDate: personData.dateNaissance ? 
                      (personData.dateNaissance.includes('T') ? 
                       personData.dateNaissance.split('T')[0] : 
                       personData.dateNaissance) : '',
            birthPlace: personData.lieuNaissance || '',
            // Récupérer le sexe
            sexe: personData.sexe || '',
            // Ajouter d'autres champs si disponibles
            ...(personData.nationnalite && { 
              nationality: typeof personData.nationnalite === 'string' 
                ? personData.nationnalite 
                : personData.nationnalite.name || personData.nationnalite 
            }),
            ...(personData.numeroPiece && { idNumber: personData.numeroPiece }),
            // Corriger le mapping des données de localisation - toujours inclure même si vide
            localite: personData.localite || '',
            divisionId: personData.division_id || '',
            // Définir une variable globale pour indiquer si l'utilisateur a des données de localisation initiales
            ...((() => {
              // Considérer que les données sont complètes seulement si division_id est présent
              // (localite seul n'est pas suffisant car il peut être un nom générique)
              const hasLocationData = (personData.division_id && personData.division_id.trim() !== '');
              (window as any).userHasInitialLocationData = hasLocationData;
              console.log('[DEBUG] Données initiales de localisation détectées:', hasLocationData);
              console.log('[DEBUG] Champs de localisation:', {
                'personData.localite': personData.localite,
                'personData.localite type': typeof personData.localite,
                'personData.localite length': personData.localite?.length,
                'personData.division_id': personData.division_id,
                'personData.division_id type': typeof personData.division_id,
                'personData.division_id length': personData.division_id?.length,
                'hasLocationData': hasLocationData
              });
              return {};
            })()),
            // Garder city pour compatibilité - toujours inclure même si vide
            city: personData.localite || ''
          });
          
          console.log('✅ Données utilisateur chargées avec succès');
          console.log('🔍 Données de localisation récupérées:', {
            'personData.localite': personData.localite,
            'personData.division_id': personData.division_id,
            'personData.divisionCode': personData.divisionCode
          });
          console.log('📋 Données finales du formulaire:', {
            firstName: personData.prenom,
            lastName: personData.nom,
            email: personData.email,
            phone: personData.telephone1,
            civility: personData.civilite,
            sexe: personData.sexe,
            birthDate: personData.dateNaissance,
            birthPlace: personData.lieuNaissance,
            localite: personData.localite,
            divisionId: personData.division_id,
            currentUserCivilite: currentUser.civilite
          });
          
          // Si l'utilisateur a un divisionId, récupérer la hiérarchie administrative
          if (personData.division_id && personData.division_id.trim() !== '') {
            console.log('🔄 Récupération de la hiérarchie administrative pour divisionId:', personData.division_id);
            try {
              // TODO: Implémenter la récupération de la hiérarchie depuis divisionId
              // Pour l'instant, permettre la modification manuelle
              console.log('⚠️ Hiérarchie administrative non implémentée - permettre modification manuelle');
            } catch (error) {
              console.error('❌ Erreur lors de la récupération de la hiérarchie:', error);
            }
          }
          return personData;
        } else {
          throw new Error(personResponse.message || 'Données utilisateur non trouvées dans la base');
        }
      } else {
        throw new Error(`Utilisateur non connecté ou personne_id manquant. Utilisateur: ${JSON.stringify(currentUser)}`);
      }
    } catch (err) {
      console.error('❌ Erreur lors de la récupération des informations utilisateur:', err);
      console.error('❌ Type d\'erreur:', typeof err);
      console.error('❌ Stack trace:', err instanceof Error ? err.stack : 'Pas de stack trace');
      const errorMessage = err instanceof Error ? err.message : `Erreur inconnue: ${JSON.stringify(err)}`;
      setError(`Impossible de charger vos informations: ${errorMessage}. Veuillez les saisir manuellement.`);
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  const handleResponse = async (response: boolean) => {
    setIsForSelf(response);
    
    // Si l'utilisateur choisit "Oui, c'est pour moi", on récupère ses informations
    // pour compléter les champs manquants de PersonCreateRequest (PUT)
    // Sinon, on prépare une création complète (POST)
    
    if (response) {
      // Si l'utilisateur crée pour lui-même, on charge ses infos
      await fetchCurrentUser();
    }
    
    setShowForm(true);
  };

  // Créer ou mettre à jour les informations personnelles selon le choix utilisateur
  const savePersonalInfo = async (personalData: PersonalInfo) => {
    try {
      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
      const token = localStorage.getItem('token');
      
      if (!token) throw new Error('Aucun token trouvé');

      // Préparer les données selon PersonCreateRequest
      const personRequest = {
        nom: personalData.lastName,
        prenom: personalData.firstName,
        telephone1: personalData.phone,
        email: personalData.email,
        dateNaissance: personalData.birthDate,
        lieuNaissance: personalData.birthPlace,
        nationnalite: personalData.nationality,
        sexe: personalData.sexe,
        situationMatrimoniale: personalData.situationMatrimoniale,
        civilite: personalData.civility,
        division_id: personalData.divisionId || undefined,
        localite: personalData.localite || undefined,
        role: 'USER',
        entrepriseRole: 'DIRIGEANT'
      };

      console.log('💾 Données à sauvegarder:', personRequest);

      let response;
      
      if (isForSelf && currentUser.personne_id) {
        // PUT - Mise à jour de la personne existante
        console.log('🔄 Mise à jour personne existante ID:', currentUser.personne_id);
        response = await fetch(`/api/v1/persons/${currentUser.personne_id}`, {
          method: 'PUT',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(personRequest)
        });
      } else {
        // POST - Création d'une nouvelle personne
        console.log('➕ Création nouvelle personne');
        response = await fetch('/api/v1/persons', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(personRequest)
        });
      }
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur lors de la sauvegarde');
      }
      
      const result = await response.json();
      console.log('✅ Personne sauvegardée:', result);
      
      return result;
    } catch (err) {
      console.error('❌ Erreur lors de la sauvegarde des informations personnelles:', err);
      const errorMessage = err instanceof Error ? err.message : 'Erreur inconnue';
      setError(`Impossible de sauvegarder les informations personnelles: ${errorMessage}`);
      return null;
    }
  };

  // Créer un associé avec EntrepriseRole.ASSOCIE
  const createAssociate = async (associateData: PersonalInfo) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('Aucun token trouvé');

      // Préparer les données selon PersonCreateRequest
      const personRequest = {
        nom: associateData.lastName,
        prenom: associateData.firstName,
        telephone1: associateData.phone,
        email: associateData.email,
        dateNaissance: associateData.birthDate,
        lieuNaissance: associateData.birthPlace,
        nationnalite: associateData.nationality,
        sexe: associateData.sexe,
        situationMatrimoniale: associateData.situationMatrimoniale,
        civilite: associateData.civility,
        division_id: associateData.divisionId, // Ajouter le division_id
        localite: associateData.localite, // Ajouter la localité
        role: 'USER',
        entrepriseRole: 'ASSOCIE' // Rôle spécifique pour les associés
      };

      console.log('👥 Création associé:', personRequest);

      const response = await fetch('/api/v1/persons', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(personRequest)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur lors de la création de l\'associé');
      }
      
      const result = await response.json();
      console.log('✅ Associé créé:', result);
      
      return result;
    } catch (err) {
      console.error('❌ Erreur lors de la création de l\'associé:', err);
      const errorMessage = err instanceof Error ? err.message : 'Erreur inconnue';
      setError(`Impossible de créer l'associé: ${errorMessage}`);
      return null;
    }
  };

  // Créer un gérant avec EntrepriseRole.GERANT
  const createManager = async (managerData: PersonalInfo) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('Aucun token trouvé');

      // Préparer les données selon PersonCreateRequest pour un gérant
      const personRequest = {
        nom: managerData.lastName,
        prenom: managerData.firstName,
        telephone1: managerData.phone,
        email: managerData.email,
        dateNaissance: managerData.birthDate,
        lieuNaissance: managerData.birthPlace,
        nationnalite: managerData.nationality,
        sexe: managerData.sexe,
        situationMatrimoniale: managerData.situationMatrimoniale,
        civilite: managerData.civility,
        division_id: managerData.divisionId, // Ajouter le division_id
        localite: managerData.localite, // Ajouter la localité
        role: 'USER',
        entrepriseRole: 'GERANT' // Rôle spécifique pour le gérant
      };

      console.log('👔 Création gérant:', personRequest);

      const response = await fetch('/api/v1/persons', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(personRequest)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur lors de la création du gérant');
      }
      
      const result = await response.json();
      console.log('✅ Gérant créé:', result);
      
      return result;
    } catch (err) {
      console.error('❌ Erreur lors de la création du gérant:', err);
      const errorMessage = err instanceof Error ? err.message : 'Erreur inconnue';
      setError(`Impossible de créer le gérant: ${errorMessage}`);
      return null;
    }
  };

  const handleNext = async () => {
    if (data.personalInfo) {
      try {
        setIsLoading(true);
        setError('');
        
        // WORKFLOW ÉTAPE 1: Sauvegarder informations personnelles (PUT/POST selon choix)
        const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
        const token = localStorage.getItem('token');
        
        if (!token) throw new Error('Aucun token trouvé');

        // Préparer les données selon PersonCreateRequest
        const personRequest = {
          nom: data.personalInfo.lastName,
          prenom: data.personalInfo.firstName,
          telephone1: data.personalInfo.phone,
          email: data.personalInfo.email,
          dateNaissance: data.personalInfo.birthDate,
          lieuNaissance: data.personalInfo.birthPlace,
          nationnalite: data.personalInfo.nationality,
          sexe: data.personalInfo.sexe,
          situationMatrimoniale: data.personalInfo.situationMatrimoniale,
          civilite: data.personalInfo.civility,
          role: 'USER',
          entrepriseRole: 'DIRIGEANT'
        };

        console.log('💾 ÉTAPE 1 - Sauvegarde informations personnelles:', personRequest);

        let response;
        
        if (data.personalInfo.isForSelf && currentUser.personne_id) {
          // PUT - Mise à jour de la personne existante
          console.log('🔄 PUT - Mise à jour personne existante ID:', currentUser.personne_id);
          response = await fetch(`/api/v1/persons/${currentUser.personne_id}`, {
            method: 'PUT',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(personRequest)
          });
        } else {
          // POST - Création d'une nouvelle personne
          console.log('➕ POST - Création nouvelle personne');
          response = await fetch('/api/v1/persons', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(personRequest)
          });
        }
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Erreur lors de la sauvegarde');
        }
        
        const result = await response.json();
        console.log('✅ ÉTAPE 1 TERMINÉE - Personne sauvegardée:', result);
        
        // Stocker founderId pour les étapes suivantes
        updateData('founderId', result.id || result.data?.id);
        
      } catch (err) {
        console.error('❌ Erreur ÉTAPE 1:', err);
        const errorMessage = err instanceof Error ? err.message : 'Erreur inconnue';
        setError(`Impossible de sauvegarder les informations personnelles: ${errorMessage}`);
        return;
      } finally {
        setIsLoading(false);
      }
    }
    
    onNext();
  };

  return (
    <div className="animate-fade-in">
      <h2 className="text-3xl font-bold text-mali-dark mb-2">Informations Personnelles</h2>
      <p className="text-gray-600 mb-8">
        Commençons par quelques informations sur vous avant de créer votre entreprise.
      </p>

      {isLoading ? (
        <div className="flex justify-center items-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-mali-emerald"></div>
          <span className="ml-3 text-gray-600">Chargement de vos informations...</span>
        </div>
      ) : error ? (
        <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-6">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-red-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-red-700">{error}</p>
            </div>
          </div>
        </div>
      ) : isForSelf === null ? (
        <div className="space-y-6">
          <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
            <h3 className="text-xl font-semibold text-mali-dark mb-4">
              Créez-vous cette entreprise pour vous-même ?
            </h3>
            <p className="text-gray-600 mb-6">
              Si vous créez cette entreprise pour vous-même, nous allons pré-remplir le formulaire avec vos informations personnelles.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 mt-6">
              <button
                onClick={() => handleResponse(true)}
                className="flex-1 bg-mali-emerald hover:bg-mali-emerald/90 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-300 flex items-center justify-center"
              >
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                Oui, c'est pour moi
              </button>
              <button
                onClick={() => handleResponse(false)}
                className="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-3 px-6 rounded-lg transition-colors duration-300 flex items-center justify-center"
              >
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
                Non, c'est pour quelqu'un d'autre
              </button>
            </div>
          </div>
        </div>
      ) : showForm ? (
        <div className="space-y-6">
          <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
            <h3 className="text-xl font-semibold text-mali-dark mb-4">
              {isForSelf ? 'Vos informations personnelles' : 'Informations du représentant'}
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center">
                  Civilité
                  {isForSelf && (
                    <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                      Récupéré automatiquement
                    </span>
                  )}
                </label>
                <select
                  value={data.personalInfo?.civility || ''}
                  onChange={isForSelf ? undefined : (e) => updateData('personalInfo', {
                    ...data.personalInfo,
                    civility: e.target.value
                  })}
                  disabled={isForSelf}
                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:border-transparent ${
                    isForSelf 
                      ? 'border-gray-200 bg-gray-50 text-gray-500 cursor-not-allowed' 
                      : 'border-gray-300 focus:ring-mali-emerald'
                  }`}
                >
                  <option value="">Sélectionnez...</option>
                  {Object.entries(CIVILITE_LABELS).map(([value, label]) => (
                    <option key={value} value={value}>{label}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Prénom</label>
                <input
                  type="text"
                  value={data.personalInfo?.firstName || ''}
                  onChange={(e) => updateData('personalInfo', {
                    ...data.personalInfo,
                    firstName: e.target.value
                  })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mali-emerald focus:border-transparent"
                  placeholder="Votre prénom"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Nom</label>
                <input
                  type="text"
                  value={data.personalInfo?.lastName || ''}
                  onChange={(e) => updateData('personalInfo', {
                    ...data.personalInfo,
                    lastName: e.target.value
                  })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mali-emerald focus:border-transparent"
                  placeholder="Votre nom"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                <input
                  type="email"
                  value={data.personalInfo?.email || ''}
                  onChange={(e) => updateData('personalInfo', {
                    ...data.personalInfo,
                    email: e.target.value
                  })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mali-emerald focus:border-transparent"
                  placeholder="votre@email.com"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Téléphone</label>
                <input
                  type="tel"
                  value={data.personalInfo?.phone || ''}
                  onChange={(e) => updateData('personalInfo', {
                    ...data.personalInfo,
                    phone: e.target.value
                  })}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mali-emerald focus:border-mali-emerald"
                  placeholder="Votre numéro de téléphone"
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center">
                  Date de naissance
                  {isForSelf && (
                    <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                      Récupéré automatiquement
                    </span>
                  )}
                </label>
                <input
                  type="date"
                  value={data.personalInfo?.birthDate || ''}
                  max={(() => {
                    const today = new Date();
                    const maxDate = new Date(today.getFullYear() - 18, today.getMonth(), today.getDate());
                    return maxDate.toISOString().split('T')[0];
                  })()}
                  onChange={isForSelf && !!data.personalInfo?.birthDate ? undefined : (e) => updateData('personalInfo', {
                    ...data.personalInfo,
                    birthDate: e.target.value
                  })}
                  disabled={isForSelf && !!data.personalInfo?.birthDate}
                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:border-transparent ${
                    isForSelf && !!data.personalInfo?.birthDate
                      ? 'border-gray-200 bg-gray-50 text-gray-500 cursor-not-allowed' 
                      : 'border-gray-300 focus:ring-mali-emerald'
                  }`}
                  required
                />
                <p className="text-xs text-gray-500 mt-1">L'utilisateur doit avoir au moins 18 ans</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center">
                  Lieu de naissance
                  {isForSelf && (
                    <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                      Récupéré automatiquement
                    </span>
                  )}
                </label>
                <input
                  type="text"
                  value={data.personalInfo?.birthPlace || ''}
                  onChange={isForSelf && !!data.personalInfo?.birthPlace ? undefined : (e) => updateData('personalInfo', {
                    ...data.personalInfo,
                    birthPlace: e.target.value
                  })}
                  disabled={isForSelf && !!data.personalInfo?.birthPlace}
                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:border-transparent ${
                    isForSelf && !!data.personalInfo?.birthPlace
                      ? 'border-gray-200 bg-gray-50 text-gray-500 cursor-not-allowed' 
                      : 'border-gray-300 focus:ring-mali-emerald'
                  }`}
                  placeholder="Votre lieu de naissance"
                  required
                />
              </div>

              {/* Message informatif pour les champs récupérés automatiquement */}
              {isForSelf && (
                <div className="col-span-2">
                  <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
                    <p className="text-sm text-green-700 flex items-center">
                      <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      {(!!data.personalInfo?.birthDate && !!data.personalInfo?.birthPlace) ? 
                        "Vos informations de naissance ont été récupérées depuis votre profil." :
                        "Vos informations personnelles ont été pré-remplies. Veuillez compléter les informations manquantes (date et lieu de naissance)."
                      }
                    </p>
                  </div>
                </div>
              )}

              {/* Localisation personnelle avec sélection hiérarchique */}
              <div className="col-span-2">
                <h4 className="text-lg font-semibold text-mali-dark mb-4 flex items-center">
                  <span className="text-xl mr-2">📍</span>
                  Votre localisation
                  {isForSelf && (
                    <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                      Récupéré automatiquement
                    </span>
                  )}
                </h4>
                {isForSelf && (
                  <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <p className="text-sm text-blue-700 flex items-center">
                      <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      {data.personalInfo?.localite || data.personalInfo?.divisionId ? 
                        "Ces informations ont été récupérées depuis votre profil et ne peuvent pas être modifiées ici." :
                        "Vos informations personnelles ont été pré-remplies. Veuillez compléter les informations de localisation manquantes."
                      }
                    </p>
                  </div>
                )}
                <PersonalLocationStep 
                  data={data}
                  updateData={updateData}
                  isReadOnly={(() => {
                    // Si ce n'est pas pour soi, toujours modifiable
                    if (!isForSelf) return false;
                    
                    // Utiliser une variable globale pour stocker les données initiales
                    // (sera définie lors du chargement des données utilisateur)
                    const hasInitialLocationData = (window as any).userHasInitialLocationData || false;
                    
                    console.log('[DEBUG] isReadOnly - isForSelf:', isForSelf, 'hasInitialLocationData:', hasInitialLocationData);
                    return hasInitialLocationData;
                  })()}
                />
              </div>

              {/* Nouvelles questions */}
              <div className="col-span-2 space-y-6 pt-4 border-t border-gray-200">
                <div>
                  <p className="block text-sm font-medium text-gray-700 mb-2">Votre adresse est-elle différente de celle de votre pièce d'identité ?</p>
                  <div className="flex space-x-4">
                    <button
                      type="button"
                      onClick={() => updateData('personalInfo', {
                        ...data.personalInfo,
                        hasDifferentAddress: true
                      })}
                      className={`flex-1 py-2 px-4 rounded-lg border ${data.personalInfo?.hasDifferentAddress === true 
                        ? 'bg-mali-emerald text-white border-mali-emerald' 
                        : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'}`}
                    >
                      Oui
                    </button>
                    <button
                      type="button"
                      onClick={() => updateData('personalInfo', {
                        ...data.personalInfo,
                        hasDifferentAddress: false
                      })}
                      className={`flex-1 py-2 px-4 rounded-lg border ${data.personalInfo?.hasDifferentAddress === false 
                        ? 'bg-mali-emerald text-white border-mali-emerald' 
                        : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'}`}
                    >
                      Non
                    </button>
                  </div>

                </div>

                {/* Extrait de casier judiciaire */}
                <div className="flex items-center justify-between mt-4">
                  <span className="text-sm font-medium text-gray-700">Avez-vous un extrait de casier judiciaire ?</span>
                  <div className="flex space-x-2">
                    <button
                      type="button"
                      onClick={() => updateData('personalInfo', {
                        ...data.personalInfo,
                        hasCriminalRecord: true
                      })}
                      className={`px-4 py-2 rounded-lg text-sm font-medium ${data.personalInfo?.hasCriminalRecord === true ? 'bg-mali-emerald text-white' : 'bg-gray-100 text-gray-700'}`}
                    >
                      Oui
                    </button>
                    <button
                      type="button"
                      onClick={() => updateData('personalInfo', {
                        ...data.personalInfo,
                        hasCriminalRecord: false
                      })}
                      className={`px-4 py-2 rounded-lg text-sm font-medium ${data.personalInfo?.hasCriminalRecord === false ? 'bg-mali-emerald text-white' : 'bg-gray-100 text-gray-700'}`}
                    >
                      Non
                    </button>
                  </div>
                </div>

                {/* Situation matrimoniale */}
                <div className="flex items-center justify-between mt-4">
                  <span className="text-sm font-medium text-gray-700">Êtes-vous marié(e) ?</span>
                  <div className="flex space-x-2">
                    <button
                      type="button"
                      onClick={() => updateData('personalInfo', {
                        ...data.personalInfo,
                        isMarried: true
                      })}
                      className={`px-4 py-2 rounded-lg text-sm font-medium ${data.personalInfo?.isMarried === true ? 'bg-mali-emerald text-white' : 'bg-gray-100 text-gray-700'}`}
                    >
                      Oui
                    </button>
                    <button
                      type="button"
                      onClick={() => updateData('personalInfo', {
                        ...data.personalInfo,
                        isMarried: false
                      })}
                      className={`px-4 py-2 rounded-lg text-sm font-medium ${data.personalInfo?.isMarried === false ? 'bg-mali-emerald text-white' : 'bg-gray-100 text-gray-700'}`}
                    >
                      Non
                    </button>
                  </div>
                </div>


                {/* Responsables supplémentaires */}
                <div className="flex items-center justify-between mt-4">
                  <span className="text-sm font-medium text-gray-700">Autorisez-vous une ou plusieurs personnes à être responsable de l'entreprise ?</span>
                  <div className="flex space-x-2">
                    <button
                      type="button"
                      onClick={() => updateData('personalInfo', {
                        ...data.personalInfo,
                        allowsMultipleManagers: true
                      })}
                      className={`px-4 py-2 rounded-lg text-sm font-medium ${data.personalInfo?.allowsMultipleManagers === true ? 'bg-mali-emerald text-white' : 'bg-gray-100 text-gray-700'}`}
                    >
                      Oui
                    </button>
                    <button
                      type="button"
                      onClick={() => updateData('personalInfo', {
                        ...data.personalInfo,
                        allowsMultipleManagers: false
                      })}
                      className={`px-4 py-2 rounded-lg text-sm font-medium ${data.personalInfo?.allowsMultipleManagers === false ? 'bg-mali-emerald text-white' : 'bg-gray-100 text-gray-700'}`}
                    >
                      Non
                    </button>
                  </div>
                </div>

                {/* Autorisation d'exercice */}
                <div className="flex items-center justify-between mt-4">
                  <span className="text-sm font-medium text-gray-700">Votre activité est-elle soumise à une autorisation d'exercice ?</span>
                  <div className="flex space-x-2">
                    <button
                      type="button"
                      onClick={() => updateData('personalInfo', {
                        ...data.personalInfo,
                        requiresExerciseAuthorization: true
                      })}
                      className={`px-4 py-2 rounded-lg text-sm font-medium ${data.personalInfo?.requiresExerciseAuthorization === true ? 'bg-mali-emerald text-white' : 'bg-gray-100 text-gray-700'}`}
                    >
                      Oui
                    </button>
                    <button
                      type="button"
                      onClick={() => updateData('personalInfo', {
                        ...data.personalInfo,
                        requiresExerciseAuthorization: false
                      })}
                      className={`px-4 py-2 rounded-lg text-sm font-medium ${data.personalInfo?.requiresExerciseAuthorization === false ? 'bg-mali-emerald text-white' : 'bg-gray-100 text-gray-700'}`}
                    >
                      Non
                    </button>
                  </div>
                </div>

                {/* Import/Export */}
                <div className="flex items-center justify-between mt-4">
                  <span className="text-sm font-medium text-gray-700">Allez-vous importer ou exporter des marchandises ?</span>
                  <div className="flex space-x-2">
                    <button
                      type="button"
                      onClick={() => updateData('personalInfo', {
                        ...data.personalInfo,
                        willImportExport: true
                      })}
                      className={`px-4 py-2 rounded-lg text-sm font-medium ${data.personalInfo?.willImportExport === true ? 'bg-mali-emerald text-white' : 'bg-gray-100 text-gray-700'}`}
                    >
                      Oui
                    </button>
                    <button
                      type="button"
                      onClick={() => updateData('personalInfo', {
                        ...data.personalInfo,
                        willImportExport: false
                      })}
                      className={`px-4 py-2 rounded-lg text-sm font-medium ${data.personalInfo?.willImportExport === false ? 'bg-mali-emerald text-white' : 'bg-gray-100 text-gray-700'}`}
                    >
                      Non
                    </button>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="mt-6">
              <button
                onClick={onNext}
                className="w-full bg-mali-emerald hover:bg-mali-emerald/90 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-300"
              >
                Continuer
              </button>
            </div>
          </div>
        </div>
      ) : (
        <div className="bg-blue-50 border-l-4 border-blue-400 p-4 mb-6">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-blue-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-blue-700">
                Nous allons maintenant collecter les informations sur l'entreprise.
              </p>
            </div>
          </div>
          <div className="mt-4">
            <button
              onClick={handleNext}
              className="bg-blue-100 text-blue-700 hover:bg-blue-200 px-4 py-2 rounded-md text-sm font-medium"
            >
              Continuer
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

// Étape 2 : Informations de l'entreprise
const CompanyInfoStep: React.FC<{data: BusinessCreationData, updateData: (field: keyof BusinessCreationData, value: any) => void}> = ({ data, updateData }) => {
  const [showValidation, setShowValidation] = useState(false);
  const [regions, setRegions] = useState<any[]>([]);
  const [cercles, setCercles] = useState<any[]>([]);
  const [arrondissements, setArrondissements] = useState<any[]>([]);
  const [communes, setCommunes] = useState<any[]>([]);
  const [quartiers, setQuartiers] = useState<any[]>([]);
  
  // États pour les enums du backend
  const [typeEntrepriseOptions, setTypeEntrepriseOptions] = useState<any[]>([]);
  const [formeJuridiqueOptions, setFormeJuridiqueOptions] = useState<any[]>([]);
  const [domaineActiviteOptions, setDomaineActiviteOptions] = useState<any[]>([]);
  
  // Variables d'état pour les IDs sélectionnés (UUIDs pour API)
  const [selectedRegionId, setSelectedRegionId] = useState<string>('');
  const [selectedCercleId, setSelectedCercleId] = useState<string>('');
  const [selectedArrondissementId, setSelectedArrondissementId] = useState<string>('');
  const [selectedCommuneId, setSelectedCommuneId] = useState<string>('');
  const [selectedQuartierId, setSelectedQuartierId] = useState<string>('');
  
  // Variables d'état pour les codes sélectionnés (codes numériques pour divisionCode)
  const [selectedRegionCode, setSelectedRegionCode] = useState<string>('');
  const [selectedCercleCode, setSelectedCercleCode] = useState<string>('');
  const [selectedArrondissementCode, setSelectedArrondissementCode] = useState<string>('');
  const [selectedCommuneCode, setSelectedCommuneCode] = useState<string>('');
  const [selectedQuartierCode, setSelectedQuartierCode] = useState<string>('');

  // Charger les régions et enums au montage + initialiser depuis les données existantes
  useEffect(() => {
    let mounted = true;
    
    // Charger les régions
    divisionService.getRegions().then((res: any[]) => {
      if (mounted) setRegions(res || []);
    }).catch(() => {});
    
    // Charger les enums du backend
    Promise.all([
      enumService.getTypeEntreprise(),
      enumService.getFormeJuridique(), 
      enumService.getDomaineActivites()
    ]).then(([typeEntreprise, formeJuridique, domaineActivites]) => {
      if (mounted) {
        setTypeEntrepriseOptions(typeEntreprise || []);
        setFormeJuridiqueOptions(formeJuridique || []);
        setDomaineActiviteOptions(domaineActivites || []);
      }
    }).catch(error => {
      console.error('Erreur lors du chargement des enums:', error);
    });
    
    return () => { mounted = false; };
  }, []);

  // Initialiser les états de sélection depuis les données existantes
  useEffect(() => {
    if (data.companyInfo?.divisionCode) {
      console.log('Initialisation depuis divisionCode existant:', data.companyInfo.divisionCode);
      // Le divisionCode existe déjà, pas besoin de réinitialiser
    }
  }, [data.companyInfo?.divisionCode]);

  // Charger cercles quand selectedRegionId change
  useEffect(() => {
    let mounted = true;
    if (selectedRegionId) {
      // Vérifier si c'est Bamako District
      const selectedRegion = regions.find(r => r.id === selectedRegionId);
      const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
      
      if (isBamakoDistrict) {
        // Pour Bamako District, charger directement les arrondissements
        console.log('[CompanyInfo Bamako District] Chargement direct des arrondissements');
        
        // Utiliser la même stratégie que PersonalLocationStep
        Promise.all([
          divisionService.getArrondissementsByRegion(selectedRegionId),
          divisionService.getAllArrondissements(),
          divisionService.searchBamakoDivisions()
        ]).then(([arrondissementsDirects, allArrondissements, bamakoDivisions]) => {
          console.log('[CompanyInfo Bamako District] Arrondissements directs:', arrondissementsDirects?.length || 0);
          console.log('[CompanyInfo Bamako District] Tous les arrondissements:', allArrondissements?.length || 0);
          
          // Stratégie 1: Arrondissements avec "premier", "deuxième", etc. (typique de Bamako)
          const strategy1 = allArrondissements.filter((arr: any) => {
            const nom = arr.nom?.toLowerCase() || '';
            return nom.includes('premier') || nom.includes('deuxième') || nom.includes('troisième') || 
                   nom.includes('quatrième') || nom.includes('cinquième') || nom.includes('sixième') || 
                   nom.includes('septième') || nom.includes('deuxieme') || nom.includes('troisieme') || 
                   nom.includes('quatrieme') || nom.includes('cinquieme') || nom.includes('sixieme') || 
                   nom.includes('septieme');
          });
          
          // Stratégie 2: Arrondissements dont le parent est dans bamakoDivisions
          const strategy2 = allArrondissements.filter((arr: any) => 
            bamakoDivisions.some((bd: any) => bd.id === arr.parent?.id)
          );
          
          // Stratégie 3: Arrondissements avec parent contenant "bamako"
          const strategy3 = allArrondissements.filter((arr: any) => 
            arr.parent?.nom?.toLowerCase().includes('bamako')
          );
          
          console.log('[CompanyInfo Bamako District] Stratégie 1 (Premier, Deuxième...):', strategy1.length, 'arrondissements');
          console.log('[CompanyInfo Bamako District] Stratégie 2 (Parent dans bamakoDivisions):', strategy2.length, 'arrondissements');
          console.log('[CompanyInfo Bamako District] Stratégie 3 (Parent contient bamako):', strategy3.length, 'arrondissements');
          
          // Utiliser la stratégie qui donne le plus de résultats
          let bamakoArrondissements = strategy1;
          if (strategy2.length > bamakoArrondissements.length) bamakoArrondissements = strategy2;
          if (strategy3.length > bamakoArrondissements.length) bamakoArrondissements = strategy3;
          
          // Vérification: Bamako devrait avoir 7 arrondissements
          if (bamakoArrondissements.length !== 7) {
            console.warn(`[CompanyInfo Bamako District] ATTENTION: ${bamakoArrondissements.length} arrondissements trouvés au lieu de 7 attendus`);
          } else {
            console.log('[CompanyInfo Bamako District] ✅ Tous les 7 arrondissements de Bamako sont présents');
          }
          
          if (mounted) {
            setCercles([]); // Pas de cercles pour Bamako
            setArrondissements(bamakoArrondissements || []);
            console.log('[CompanyInfo Bamako District] Arrondissements chargés:', bamakoArrondissements?.length || 0);
          }
        }).catch((error: any) => {
          console.error('[CompanyInfo Bamako District] Erreur chargement arrondissements:', error);
        });
      } else {
        // Structure classique : charger les cercles
        divisionService.getCerclesByRegion(selectedRegionId).then((res: any[]) => {
          if (mounted) setCercles(res || []);
        }).catch(() => {});
      }
    } else {
      setCercles([]);
      setArrondissements([]);
      setCommunes([]);
      setSelectedCercleId('');
      setSelectedArrondissementId('');
      setSelectedCommuneId('');
    }
    return () => { mounted = false; };
  }, [selectedRegionId, regions]);

  // Charger arrondissements quand selectedCercleId change
  useEffect(() => {
    let mounted = true;
    if (selectedCercleId) {
      divisionService.getArrondissementsByCercle(selectedCercleId).then((res: any[]) => {
        if (mounted) setArrondissements(res || []);
      }).catch(() => {});
    } else {
      setArrondissements([]);
      setCommunes([]);
      setSelectedArrondissementId('');
      setSelectedCommuneId('');
    }
    return () => { mounted = false; };
  }, [selectedCercleId]);

  // Charger communes quand selectedArrondissementId change
  useEffect(() => {
    let mounted = true;
    if (selectedArrondissementId) {
      // Vérifier si c'est Bamako District
      const selectedRegion = regions.find(r => r.id === selectedRegionId);
      const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
      
      if (isBamakoDistrict) {
        // Pour Bamako District, charger directement les quartiers depuis l'arrondissement
        console.log('[CompanyInfo Bamako District] Chargement direct des quartiers depuis arrondissement');
        console.log('[CompanyInfo Bamako District] Arrondissement ID:', selectedArrondissementId);
        
        // Pour Bamako District, essayer d'abord la relation directe, puis la solution par code
        console.log('[CompanyInfo Bamako District] Tentative 1: Relation directe arrondissement->quartiers');
        divisionService.getQuartiersByArrondissement(selectedArrondissementId).then((quartiers: any[]) => {
          console.log('[CompanyInfo Bamako District] Quartiers par relation directe:', quartiers?.length || 0);
          
          if (quartiers && quartiers.length > 0) {
            // Relation directe fonctionne
            if (mounted) {
              setCommunes([]);
              setQuartiers(quartiers);
              console.log('[CompanyInfo Bamako District] Quartiers chargés par relation directe:', quartiers.length);
            }
          } else {
            // Relation directe ne fonctionne pas, essayer par code
            console.log('[CompanyInfo Bamako District] Tentative 2: Recherche par code d\'arrondissement');
            return divisionService.getQuartiersByArrondissementCode(selectedArrondissementId);
          }
        }).then((quartiersParCode: any[]) => {
          if (quartiersParCode && quartiersParCode.length > 0) {
            console.log('[CompanyInfo Bamako District] Quartiers par code:', quartiersParCode.length);
            if (mounted) {
              setCommunes([]);
              setQuartiers(quartiersParCode);
              console.log('[CompanyInfo Bamako District] Quartiers chargés par code:', quartiersParCode.length);
            }
          } else {
            console.log('[CompanyInfo Bamako District] Aucun quartier trouvé avec les deux méthodes');
            if (mounted) {
              setCommunes([]);
              setQuartiers([]);
            }
          }
        }).catch((error: any) => {
          console.error('[CompanyInfo Bamako District] Erreur chargement quartiers:', error);
        });
      } else {
        // Structure classique : charger les communes
        divisionService.getCommunesByArrondissement(selectedArrondissementId).then((res: any[]) => {
          if (mounted) setCommunes(res || []);
        }).catch(() => {});
      }
    } else {
      setCommunes([]);
      setQuartiers([]);
      setSelectedCommuneId('');
      setSelectedQuartierId('');
    }
    return () => { mounted = false; };
  }, [selectedArrondissementId, selectedRegionId, regions]);

  // Charger quartiers quand selectedCommuneId change
  useEffect(() => {
    let mounted = true;
    if (selectedCommuneId) {
      divisionService.getQuartiersByCommune(selectedCommuneId).then((res: any[]) => {
        if (mounted) setQuartiers(res || []);
      }).catch(() => {});
    } else {
      setQuartiers([]);
      setSelectedQuartierId('');
    }
    return () => { mounted = false; };
  }, [selectedCommuneId]);

  return (
    <div className="animate-fade-in">
      <h2 className="text-3xl font-bold text-mali-dark mb-2 animate-slide-up">Informations de l'Entreprise</h2>
      <p className="text-gray-600 mb-8 animate-slide-up" style={{animationDelay: '0.1s'}}>
        Renseignez les informations de base de votre entreprise.
      </p>

      <div className="space-y-8">
        {/* Informations de base */}
        <div className="bg-gradient-to-br from-mali-emerald/5 to-mali-emerald/10 rounded-xl p-6 border border-mali-emerald/20 shadow-sm animate-slide-up" style={{animationDelay: '0.2s'}}>
          <h3 className="text-xl font-semibold text-mali-dark mb-6 flex items-center">
            <span className="text-2xl mr-2 animate-bounce">🏢</span>
            Informations de base
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Nom de l'entreprise */}
            <div className="animate-slide-up" style={{animationDelay: '0.3s'}}>
              <label className="block text-sm font-medium text-gray-700 mb-2">Nom de l'entreprise *</label>
              <input
                type="text"
                value={data.companyInfo?.nom || ''}
                onChange={(e) => updateData('companyInfo', { ...data.companyInfo, nom: e.target.value })}
                className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:border-transparent transition-all duration-500 ${showValidation && !data.companyInfo?.nom ? 'border-red-400 focus:ring-red-400' : 'border-gray-300 focus:ring-mali-emerald'}`}
                placeholder="Ex: Mali Invest SARL"
              />
            </div>

            {/* Sigle */}
            <div className="animate-slide-up" style={{animationDelay: '0.35s'}}>
              <label className="block text-sm font-medium text-gray-700 mb-2">Sigle (optionnel)</label>
              <input
                type="text"
                value={data.companyInfo?.sigle || ''}
                onChange={(e) => updateData('companyInfo', { ...data.companyInfo, sigle: e.target.value })}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-mali-emerald focus:border-transparent transition-all duration-500"
                placeholder="Ex: MI-SARL"
              />
            </div>

            {/* Capitale */}
            <div className="animate-slide-up" style={{animationDelay: '0.37s'}}>
              <label className="block text-sm font-medium text-gray-700 mb-2">Capitale *</label>
              <input
                type="text"
                value={data.companyInfo?.capitale || ''}
                onChange={(e) => updateData('companyInfo', { ...data.companyInfo, capitale: e.target.value })}
                className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:border-transparent transition-all duration-500 ${showValidation && !data.companyInfo?.capitale ? 'border-red-400 focus:ring-red-400' : 'border-gray-300 focus:ring-mali-emerald'}`}
                placeholder="Ex: 1 000 000 FCFA"
              />
            </div>



            {/* Type d'entreprise */}
            <div className="animate-slide-up" style={{animationDelay: '0.4s'}}>
              <label className="block text-sm font-medium text-gray-700 mb-2">Type d'entreprise *</label>
              <select
                value={data.companyInfo?.typeEntreprise || ''}
                onChange={(e) => {
                  const newTypeEntreprise = e.target.value as TypeEntreprise;
                  // Auto-sélectionner E_I si Entreprise Individuelle
                  const newFormeJuridique = newTypeEntreprise === 'ENTREPRISE_INDIVIDUELLE' ? 'E_I' : data.companyInfo?.formeJuridique;
                  updateData('companyInfo', { 
                    ...data.companyInfo, 
                    typeEntreprise: newTypeEntreprise,
                    formeJuridique: newFormeJuridique
                  });
                }}
                className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:border-transparent transition-all duration-500 ${showValidation && !data.companyInfo?.typeEntreprise ? 'border-red-400 focus:ring-red-400' : 'border-gray-300 focus:ring-mali-emerald'}`}
              >
                <option value="">Sélectionnez</option>
                {typeEntrepriseOptions.map((option: any) => (
                  <option key={option.key} value={option.key}>{option.value}</option>
                ))}
              </select>
            </div>

            {/* Forme juridique */}
            <div className="animate-slide-up" style={{animationDelay: '0.45s'}}>
              <label className="block text-sm font-medium text-gray-700 mb-2">Forme juridique *</label>
              <select
                value={data.companyInfo?.formeJuridique || ''}
                onChange={(e) => updateData('companyInfo', { ...data.companyInfo, formeJuridique: e.target.value as FormeJuridique })}
                className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:border-transparent transition-all duration-500 ${showValidation && !data.companyInfo?.formeJuridique ? 'border-red-400 focus:ring-red-400' : 'border-gray-300 focus:ring-mali-emerald'}`}
                disabled={data.companyInfo?.typeEntreprise === 'ENTREPRISE_INDIVIDUELLE'}
              >
                <option value="">Sélectionnez</option>
                {formeJuridiqueOptions
                  .filter((option: any) => {
                    // Si Entreprise Individuelle, montrer seulement E_I
                    if (data.companyInfo?.typeEntreprise === 'ENTREPRISE_INDIVIDUELLE') {
                      return option.key === 'E_I';
                    }
                    // Si Société, montrer tout sauf E_I
                    return option.key !== 'E_I';
                  })
                  .map((option: any) => (
                    <option key={option.key} value={option.key}>{option.label || option.value}</option>
                  ))
                }
              </select>
              {data.companyInfo?.typeEntreprise === 'ENTREPRISE_INDIVIDUELLE' && (
                <p className="text-sm text-gray-500 mt-1">Forme juridique automatiquement sélectionnée pour une entreprise individuelle</p>
              )}
            </div>
                {/* Domaine d'activité non réglementé */}
            <div className="animate-slide-up" style={{animationDelay: '0.52s'}}>
              <label className="block text-sm font-medium text-gray-700 mb-2">Domaine d'activité non réglementé</label>
              <select
                value={data.companyInfo?.domaineActiviteNr || ''}
                onChange={(e) => {
                  const selectedNr = e.target.value as DomaineActiviteNr;
                  
                  // Mettre à jour le domaine non réglementé
                  let updatedCompanyInfo = { 
                    ...data.companyInfo, 
                    domaineActiviteNr: selectedNr || undefined 
                  };
                  
                  // Si ce domaine non réglementé a une correspondance réglementée, sélectionner automatiquement
                  if (selectedNr && DOMAINE_MAPPING[selectedNr] && DOMAINE_MAPPING[selectedNr].length > 0) {
                    updatedCompanyInfo.domaineActivite = DOMAINE_MAPPING[selectedNr][0];
                    console.log('🔄 Sélection automatique du domaine réglementé:', DOMAINE_MAPPING[selectedNr][0]);
                  }
                  
                  updateData('companyInfo', updatedCompanyInfo);
                }}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-mali-emerald focus:border-transparent transition-all duration-500"
              >
                <option value="">Sélectionnez (optionnel)</option>
                {Object.entries(DOMAINE_ACTIVITE_NR_LABELS).map(([key, label]) => (
                  <option key={key} value={key}>{label}</option>
                ))}
              </select>
              <p className="text-sm text-gray-500 mt-1">Sélectionnez votre domaine d'activité non réglementé (optionnel)</p>
            </div>
            {/* Domaine d'activité réglementé */}
            {(() => {
              // Vérifier si le domaine non réglementé sélectionné a une correspondance
              const selectedNr = data.companyInfo?.domaineActiviteNr;
              const hasCorrespondence = selectedNr && DOMAINE_MAPPING[selectedNr] && DOMAINE_MAPPING[selectedNr].length > 0;
              
              // Si un domaine non réglementé est sélectionné mais n'a pas de correspondance, masquer le champ
              if (selectedNr && !hasCorrespondence) {
                return null; // Masquer complètement le champ
              }
              
              return (
                <div className="animate-slide-up" style={{animationDelay: '0.5s'}}>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Domaine d'activité réglementé *</label>
                  {(() => {
                    const isDisabled = Boolean(hasCorrespondence);
                
                return (
                  <>
                    <select
                      value={data.companyInfo?.domaineActivite || ''}
                      onChange={(e) => {
                        const selectedActivite = e.target.value as DomaineActivites;
                        let updatedCompanyInfo = { 
                          ...data.companyInfo, 
                          domaineActivite: selectedActivite || undefined 
                        };
                        
                        // Si ce domaine réglementé a une correspondance, sélectionner automatiquement le domaine non réglementé
                        if (selectedActivite && DOMAINE_MAPPING_INVERSE[selectedActivite]) {
                          updatedCompanyInfo.domaineActiviteNr = DOMAINE_MAPPING_INVERSE[selectedActivite];
                        }
                        
                        updateData('companyInfo', updatedCompanyInfo);
                      }}
                      disabled={isDisabled}
                      className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:border-transparent transition-all duration-500 ${
                        isDisabled 
                          ? 'bg-gray-100 text-gray-500 cursor-not-allowed border-gray-200' 
                          : showValidation && !data.companyInfo?.domaineActivite 
                            ? 'border-red-400 focus:ring-red-400' 
                            : 'border-gray-300 focus:ring-mali-emerald'
                      }`}
                    >
                      <option value="">Sélectionnez</option>
                      {domaineActiviteOptions.map((option: any) => (
                        <option key={option.key} value={option.key}>{option.value}</option>
                      ))}
                    </select>
                    {isDisabled && (
                      <div className="mt-1">
                        <p className="text-sm text-blue-600 flex items-center">
                          <span className="mr-1">ℹ️</span>
                          Cette activité est soumise à une demande d'autorisation d'exercice
                        </p>
                        {/* Bouton masqué - sera dans une étape séparée
                        <button
                          onClick={() => {
                            const selectedNr = data.companyInfo?.domaineActiviteNr;
                            if (selectedNr && DOMAINE_MAPPING[selectedNr] && DOMAINE_MAPPING[selectedNr].length > 0) {
                              const domaineReglemente = DOMAINE_MAPPING[selectedNr][0];
                              generateAutorisationDocument(domaineReglemente, data);
                            }
                          }}
                          className="mt-2 px-3 py-1 bg-orange-600 text-white text-sm rounded-md hover:bg-orange-700 transition-colors"
                        >
                          Générer la demande d'autorisation
                        </button>
                        */}
                      </div>
                      
                    )}
                  </>
                    );
                  })()}
                </div>
              );
            })()}
                        {/* Activité secondaire */}
                        <div className="animate-slide-up md:col-span-2" style={{animationDelay: '0.38s'}}>
              <label className="block text-sm font-medium text-gray-700 mb-2">Activité secondaire</label>
              <textarea
                value={data.companyInfo?.activiteSecondaire || ''}
                onChange={(e) => updateData('companyInfo', { ...data.companyInfo, activiteSecondaire: e.target.value })}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-mali-emerald focus:border-transparent transition-all duration-500"
                placeholder="Décrivez brièvement l'activité secondaire de l'entreprise"
                rows={3}
              />
              <p className="text-sm text-gray-500 mt-1">Optionnel. Sera enregistré dans votre dossier.</p>
            </div>

          
          </div>
        </div>

        {/* Localisation */}
        <div className="bg-gradient-to-br from-mali-gold/5 to-mali-gold/10 rounded-xl p-6 border border-mali-gold/20 shadow-sm animate-slide-up" style={{animationDelay: '0.55s'}}>
          <h3 className="text-xl font-semibold text-mali-dark mb-6 flex items-center">
            <span className="text-2xl mr-2 animate-bounce">📍</span>
            Localisation
          </h3>
          
          <CompanyLocationStep 
            data={data}
            updateData={updateData}
          />
              <select
                value={selectedRegionId || ''}
                onChange={(e) => {
                  const selectedOption = e.target.selectedOptions[0];
                  const regionId = selectedOption.value;
                  const regionCode = selectedOption.getAttribute('data-code') || '';
                  
                  setSelectedRegionId(regionId);
                  setSelectedRegionCode(regionCode);
                  
                  // Reset des niveaux inférieurs
                  setSelectedCercleId(''); setSelectedCercleCode('');
                  setSelectedArrondissementId(''); setSelectedArrondissementCode('');
                  setSelectedCommuneId(''); setSelectedCommuneCode('');
                  setSelectedQuartierId(''); setSelectedQuartierCode('');
                  
                  // Mettre à jour le divisionCode dans companyInfo
                  const divisionCode = regionCode || '';
                  console.log('Mise à jour divisionCode (région):', divisionCode);
                  updateData('companyInfo', { ...data.companyInfo, divisionCode });
                }}
                className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:border-transparent transition-all duration-500 ${showValidation && !selectedRegionId ? 'border-red-400 focus:ring-red-400' : 'border-gray-300 focus:ring-mali-emerald'}`}
              >
                <option value="">Sélectionnez une région</option>
                {regions.map((r: any) => (
                  <option key={r.id} value={r.id} data-code={r.code}>{r.nom}</option>
                ))}
              </select>
            </div>

            {/* Cercle - Masqué pour Bamako District */}
            {(() => {
              const selectedRegion = regions.find(r => r.id === selectedRegionId);
              const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
              
              if (isBamakoDistrict) {
                return null; // Masquer le champ Cercle pour Bamako District
              }
              
              return (
                <div className="animate-slide-up" style={{animationDelay: '0.65s'}}>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Cercle</label>
              <select
                value={selectedCercleId || ''}
                onChange={(e) => {
                  const selectedOption = e.target.selectedOptions[0];
                  const cercleId = selectedOption.value;
                  const cercleCode = selectedOption.getAttribute('data-code') || '';
                  
                  setSelectedCercleId(cercleId);
                  setSelectedCercleCode(cercleCode);
                  
                  // Reset des niveaux inférieurs
                  setSelectedArrondissementId(''); setSelectedArrondissementCode('');
                  setSelectedCommuneId(''); setSelectedCommuneCode('');
                  setSelectedQuartierId(''); setSelectedQuartierCode('');
                  
                  // Mettre à jour le divisionCode dans companyInfo
                  const divisionCode = cercleCode || selectedRegionCode || '';
                  updateData('companyInfo', { ...data.companyInfo, divisionCode });
                }}
                disabled={!selectedRegionId}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-mali-emerald focus:border-transparent transition-all duration-500 disabled:bg-gray-100"
              >
                <option value="">Sélectionnez un cercle</option>
                {cercles.map((c: any) => (
                  <option key={c.id} value={c.id} data-code={c.code}>{c.nom}</option>
                ))}
                  </select>
                </div>
              );
            })()}

            {/* Arrondissement */}
            <div className="animate-slide-up" style={{animationDelay: '0.7s'}}>
              <label className="block text-sm font-medium text-gray-700 mb-2">Arrondissement</label>
              <select
                value={selectedArrondissementId || ''}
                onChange={(e) => {
                  const selectedOption = e.target.selectedOptions[0];
                  const arrondissementId = selectedOption.value;
                  const arrondissementCode = selectedOption.getAttribute('data-code') || '';
                  
                  setSelectedArrondissementId(arrondissementId);
                  setSelectedArrondissementCode(arrondissementCode);
                  
                  // Reset des niveaux inférieurs
                  setSelectedCommuneId(''); setSelectedCommuneCode('');
                  setSelectedQuartierId(''); setSelectedQuartierCode('');
                  
                  // Mettre à jour le divisionCode dans companyInfo
                  const divisionCode = arrondissementCode || selectedCercleCode || selectedRegionCode || '';
                  updateData('companyInfo', { ...data.companyInfo, divisionCode });
                }}
                disabled={(() => {
                  const selectedRegion = regions.find(r => r.id === selectedRegionId);
                  const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
                  return isBamakoDistrict ? !selectedRegionId : !selectedCercleId;
                })()}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-mali-emerald focus:border-transparent transition-all duration-500 disabled:bg-gray-100"
              >
                <option value="">Sélectionnez un arrondissement</option>
                {arrondissements.map((a: any) => (
                  <option key={a.id} value={a.id} data-code={a.code}>{a.nom}</option>
                ))}
              </select>
            </div>

            {/* Commune - Masqué pour Bamako District */}
            {(() => {
              const selectedRegion = regions.find(r => r.id === selectedRegionId);
              const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
              
              if (isBamakoDistrict) {
                return null; // Masquer le champ Commune pour Bamako District
              }
              
              return (
                <div className="animate-slide-up" style={{animationDelay: '0.75s'}}>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Commune</label>
              <select
                value={selectedCommuneId || ''}
                onChange={(e) => {
                  const selectedOption = e.target.selectedOptions[0];
                  const communeId = selectedOption.value;
                  const communeCode = selectedOption.getAttribute('data-code') || '';
                  
                  setSelectedCommuneId(communeId);
                  setSelectedCommuneCode(communeCode);
                  
                  // Reset des niveaux inférieurs
                  setSelectedQuartierId(''); setSelectedQuartierCode('');
                  
                  // Mettre à jour le divisionCode dans companyInfo
                  const divisionCode = communeCode || selectedArrondissementCode || selectedCercleCode || selectedRegionCode || '';
                  updateData('companyInfo', { ...data.companyInfo, divisionCode });
                }}
                disabled={!selectedArrondissementId}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-mali-emerald focus:border-transparent transition-all duration-500 disabled:bg-gray-100"
              >
                <option value="">Sélectionnez une commune</option>
                {communes.map((c: any) => (
                  <option key={c.id} value={c.id} data-code={c.code}>{c.nom}</option>
                ))}
                  </select>
                </div>
              );
            })()}

            {/* Quartier */}
            <div className="animate-slide-up" style={{animationDelay: '0.8s'}}>
              <label className="block text-sm font-medium text-gray-700 mb-2">Quartier</label>
              <select
                value={selectedQuartierId || ''}
                onChange={(e) => {
                  const selectedOption = e.target.selectedOptions[0];
                  const quartierId = selectedOption.value;
                  const quartierCode = selectedOption.getAttribute('data-code') || '';
                  
                  setSelectedQuartierId(quartierId);
                  setSelectedQuartierCode(quartierCode);
                  
                  // Mettre à jour le divisionCode dans companyInfo
                  const divisionCode = quartierCode || selectedCommuneCode || selectedArrondissementCode || selectedCercleCode || selectedRegionCode || '';
                  updateData('companyInfo', { ...data.companyInfo, divisionCode });
                }}
                disabled={(() => {
                  const selectedRegion = regions.find(r => r.id === selectedRegionId);
                  const isBamakoDistrict = selectedRegion?.nom?.toLowerCase().includes('bamako') && selectedRegion?.nom?.toLowerCase().includes('district');
                  return isBamakoDistrict ? !selectedArrondissementId : !selectedCommuneId;
                })()}
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-mali-emerald focus:border-transparent transition-all duration-500 disabled:bg-gray-100"
              >
                <option value="">Sélectionnez un quartier</option>
                {quartiers.map((q: any) => (
                  <option key={q.id} value={q.id} data-code={q.code}>{q.nom}</option>
                ))}
              </select>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Étape 4 : Documents
const DocumentsStep: React.FC<{data: BusinessCreationData, updateData: (field: keyof BusinessCreationData, value: any) => void}> = ({ data, updateData }) => {
  const [documentPlans, setDocumentPlans] = useState<Array<{key: string, value: string}>>([]);

  useEffect(() => {
    let isMounted = true;
    const load = async () => {
      try {
        const values = await enumService.getDocumentPlans();
        if (isMounted && Array.isArray(values)) {
          // Sort by numeric pages extracted from enum key like _3, _4, _5, _7
          const sorted = [...values].sort((a, b) => {
            const pa = parseInt((a.key.match(/_(\d+)/)?.[1] || '0'), 10);
            const pb = parseInt((b.key.match(/_(\d+)/)?.[1] || '0'), 10);
            return pa - pb;
          });
          setDocumentPlans(sorted);
        }
      } catch (e) {
        // Keep silent fallback; UI will just show empty options
      }
    };
    load();
    return () => { isMounted = false; };
  }, []);

  const pagesFromEnum = (key: string): number | undefined => {
    const m = key.match(/_(\d+)/);
    return m ? parseInt(m[1], 10) : undefined;
  };

  return (
    <div className="animate-fade-in">
      <h2 className="text-3xl font-bold text-mali-dark mb-2 animate-slide-up">Documents Officiels</h2>
      <p className="text-gray-600 mb-8 animate-slide-up" style={{animationDelay: '0.1s'}}>
        Téléchargez les documents requis pour l'immatriculation de votre entreprise au Mali.
      </p>

      <div className="space-y-8">
        {/* Statuts de la société */}
        <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100 animate-slide-up" style={{animationDelay: '0.2s'}}>
          <h3 className="text-xl font-semibold text-mali-dark mb-4 flex items-center">
            <span className="bg-mali-emerald text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">📄</span>
            Statuts de la Société
          </h3>
          <p className="text-gray-600 mb-6 text-sm">
            Document constitutif définissant l'organisation et le fonctionnement de votre société.
          </p>
          
          {/* Options pour les statuts */}
          <div className="space-y-4 mb-6">
            <div className="flex items-start space-x-3">
              <input
                type="radio"
                id="upload-statutes"
                name="statutes-option"
                checked={!data.documents?.needsStatutesDrafting}
                onChange={() => {
                  updateData('documents', {
                    ...data.documents,
                    needsStatutesDrafting: false,
                    statutesPages: undefined
                  });
                }}
                className="mt-1 w-4 h-4 text-mali-emerald bg-gray-100 border-gray-300 focus:ring-mali-emerald focus:ring-2"
              />
              <div className="flex-1">
                <label htmlFor="upload-statutes" className="block text-sm font-medium text-gray-700 cursor-pointer">
                  J'ai déjà mes statuts rédigés
                </label>
                <p className="text-xs text-gray-500 mt-1">
                  Téléchargez vos statuts existants au format PDF, DOC ou DOCX
                </p>
              </div>
            </div>
            
            <div className="flex items-start space-x-3">
              <input
                type="radio"
                id="draft-statutes"
                name="statutes-option"
                checked={data.documents?.needsStatutesDrafting || false}
                onChange={() => {
                  updateData('documents', {
                    ...data.documents,
                    needsStatutesDrafting: true,
                    statutes: null,
                    statutesName: ''
                  });
                }}
                className="mt-1 w-4 h-4 text-mali-emerald bg-gray-100 border-gray-300 focus:ring-mali-emerald focus:ring-2"
              />
              <div className="flex-1">
                <label htmlFor="draft-statutes" className="block text-sm font-medium text-gray-700 cursor-pointer">
                  Faire rédiger mes statuts par InvestMali
                </label>
                <p className="text-xs text-gray-500 mt-1">
                  Service de rédaction professionnel - <strong className="text-mali-emerald">4 000 FCFA par page</strong>
                </p>
              </div>
            </div>
          </div>

          {/* Upload des statuts existants */}
          {!data.documents?.needsStatutesDrafting && (
            <div className="relative animate-slide-up">
              <input
                type="file"
                accept=".pdf,.doc,.docx"
                onChange={(e) => {
                  const file = e.target.files?.[0] || null;
                  updateData('documents', {
                    ...data.documents,
                    statutes: file,
                    statutesName: file?.name || ''
                  });
                }}
                className="hidden"
                id="statutes-upload"
              />
              <label
                htmlFor="statutes-upload"
                className="w-full px-6 py-4 border-2 border-dashed border-gray-300 rounded-xl hover:border-mali-emerald transition-all duration-500 transform hover:-translate-y-1 hover:shadow-lg cursor-pointer flex items-center justify-center space-x-3 bg-gray-50 hover:bg-mali-emerald/5"
              >
                {data.documents?.statutesName ? (
                  <>
                    <svg className="w-6 h-6 text-mali-emerald" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span className="text-mali-emerald font-medium">{data.documents.statutesName}</span>
                    <span className="text-sm text-gray-500">(Cliquez pour changer)</span>
                  </>
                ) : (
                  <>
                    <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    <span className="text-gray-600">Télécharger vos statuts existants</span>
                  </>
                )}
              </label>
              <p className="text-xs text-gray-500 mt-2">
                Formats acceptés : PDF, DOC, DOCX (max 10MB)
              </p>
            </div>
          )}

          {/* Service de rédaction */}
          {data.documents?.needsStatutesDrafting && (
            <div className="bg-gradient-to-r from-mali-emerald/10 to-mali-gold/10 p-6 rounded-xl border border-mali-emerald/20 animate-slide-up">
              <div className="flex items-start space-x-4">
                <div className="bg-mali-emerald text-white rounded-full p-2 flex-shrink-0">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                </div>
                <div className="flex-1">
                  <h4 className="text-lg font-semibold text-mali-dark mb-2">Service de Rédaction InvestMali</h4>
                  <p className="text-gray-600 text-sm mb-4">
                    Nos experts juridiques rédigeront vos statuts selon la législation malienne en vigueur.
                  </p>
                  
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Nombre de pages estimé pour vos statuts
                    </label>
                    <select
                      value={data.documents?.statutesPages || ''}
                      onChange={(e) => {
                        updateData('documents', {
                          ...data.documents,
                          statutesPages: parseInt(e.target.value) || undefined
                        });
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-mali-emerald focus:border-transparent"
                    >
                      <option value="">Sélectionnez le nombre de pages</option>
                      {documentPlans.map((plan) => {
                        const pages = pagesFromEnum(plan.key);
                        if (!pages) return null;
                        return (
                          <option key={plan.key} value={pages}>{plan.value}</option>
                        );
                      })}
                    </select>
                  </div>
                  
                  {data.documents?.statutesPages && (
                    <div className="bg-white p-4 rounded-lg border border-mali-emerald/30 animate-fade-in">
                      <div className="flex justify-between items-center">
                        <span className="text-sm font-medium text-gray-700">Coût estimé :</span>
                        <span className="text-xl font-bold text-mali-emerald">
                          {(data.documents.statutesPages * 3500).toLocaleString()} FCFA
                        </span>
                      </div>
                      <p className="text-xs text-gray-500 mt-2">
                        Tarif : 3500 FCFA par page • Délai : 2-3 jours ouvrables
                      </p>
                    </div>
                  )}
                  
                  <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <p className="text-blue-800 text-sm">
                      <strong>Inclus :</strong> Rédaction conforme, révisions illimitées, format officiel pour dépôt
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Registre de commerce */}
        <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100 animate-slide-up" style={{animationDelay: '0.3s'}}>
          <h3 className="text-xl font-semibold text-mali-dark mb-4 flex items-center">
            <span className="bg-mali-gold text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">🏪</span>
            Registre de Commerce
          </h3>
          
          <div className="mb-4">
            <label className="flex items-center space-x-3 cursor-pointer">
              <input
                type="checkbox"
                checked={data.documents?.hasCommerceRegistry || false}
                onChange={(e) => {
                  updateData('documents', {
                    ...data.documents,
                    hasCommerceRegistry: e.target.checked,
                    commerceRegistry: e.target.checked ? data.documents?.commerceRegistry : null,
                    commerceRegistryName: e.target.checked ? data.documents?.commerceRegistryName : ''
                  });
                }}
                className="w-4 h-4 text-mali-emerald bg-gray-100 border-gray-300 rounded focus:ring-mali-emerald focus:ring-2"
              />
              <span className="text-gray-700">J'ai déjà un registre de commerce</span>
            </label>
          </div>

          {data.documents?.hasCommerceRegistry && (
            <div className="relative animate-slide-up">
              <input
                type="file"
                accept=".pdf,.jpg,.jpeg,.png"
                onChange={(e) => {
                  const file = e.target.files?.[0] || null;
                  updateData('documents', {
                    ...data.documents,
                    commerceRegistry: file,
                    commerceRegistryName: file?.name || ''
                  });
                }}
                className="hidden"
                id="commerce-registry-upload"
              />
              <label
                htmlFor="commerce-registry-upload"
                className="w-full px-6 py-4 border-2 border-dashed border-gray-300 rounded-xl hover:border-mali-gold transition-all duration-500 transform hover:-translate-y-1 hover:shadow-lg cursor-pointer flex items-center justify-center space-x-3 bg-gray-50 hover:bg-mali-gold/5"
              >
                {data.documents?.commerceRegistryName ? (
                  <>
                    <svg className="w-6 h-6 text-mali-gold" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span className="text-mali-gold font-medium">{data.documents.commerceRegistryName}</span>
                    <span className="text-sm text-gray-500">(Cliquez pour changer)</span>
                  </>
                ) : (
                  <>
                    <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    <span className="text-gray-600">Télécharger le registre de commerce</span>
                  </>
                )}
              </label>
              <p className="text-xs text-gray-500 mt-2">
                Formats acceptés : PDF, JPG, PNG (max 5MB)
              </p>
            </div>
          )}
          
          {!data.documents?.hasCommerceRegistry && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 animate-fade-in">
              <p className="text-blue-800 text-sm">
                <strong>Information :</strong> Si vous n'avez pas encore de registre de commerce, 
                InvestMali vous aidera dans les démarches d'immatriculation.
              </p>
            </div>
          )}
        </div>

        {/* Certificat de résidence */}
        <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100 animate-slide-up" style={{animationDelay: '0.4s'}}>
          <h3 className="text-xl font-semibold text-mali-dark mb-4 flex items-center">
            <span className="bg-mali-purple text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">🏠</span>
            Certificat de Résidence
          </h3>
          <p className="text-gray-600 mb-4 text-sm">
            Certificat de résidence du gérant ou représentant légal de l'entreprise.
          </p>
          
          <div className="relative">
            <input
              type="file"
              accept=".pdf,.jpg,.jpeg,.png"
              onChange={(e) => {
                const file = e.target.files?.[0] || null;
                updateData('documents', {
                  ...data.documents,
                  residenceCertificate: file,
                  residenceCertificateName: file?.name || ''
                });
              }}
              className="hidden"
              id="residence-certificate-upload"
            />
            <label
              htmlFor="residence-certificate-upload"
              className="w-full px-6 py-4 border-2 border-dashed border-gray-300 rounded-xl hover:border-mali-purple transition-all duration-500 transform hover:-translate-y-1 hover:shadow-lg cursor-pointer flex items-center justify-center space-x-3 bg-gray-50 hover:bg-mali-purple/5"
            >
              {data.documents?.residenceCertificateName ? (
                <>
                  <svg className="w-6 h-6 text-mali-purple" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span className="text-mali-purple font-medium">{data.documents.residenceCertificateName}</span>
                  <span className="text-sm text-gray-500">(Cliquez pour changer)</span>
                </>
              ) : (
                <>
                  <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                  </svg>
                  <span className="text-gray-600">Télécharger le certificat de résidence</span>
                </>
              )}
            </label>
          </div>
          <p className="text-xs text-gray-500 mt-2">
            Formats acceptés : PDF, JPG, PNG (max 5MB) - Document obligatoire
          </p>
        </div>

        {/* Résumé des documents */}
        <div className="bg-gradient-to-r from-mali-emerald/10 to-mali-gold/10 p-6 rounded-2xl border border-mali-emerald/20 animate-slide-up" style={{animationDelay: '0.5s'}}>
          <h4 className="text-lg font-semibold text-mali-dark mb-3 flex items-center">
            <span className="bg-mali-emerald text-white rounded-full w-6 h-6 flex items-center justify-center text-xs mr-2">✓</span>
            Documents Téléchargés
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className={`p-3 rounded-lg border-2 transition-all duration-300 ${
              data.documents?.statutesName 
                ? 'bg-green-50 border-green-200 text-green-800' 
                : 'bg-gray-50 border-gray-200 text-gray-500'
            }`}>
              <div className="flex items-center space-x-2">
                {data.documents?.statutesName ? (
                  <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                ) : (
                  <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                )}
                <span className="text-sm font-medium">Statuts</span>
              </div>
            </div>
            
            <div className={`p-3 rounded-lg border-2 transition-all duration-300 ${
              data.documents?.commerceRegistryName || !data.documents?.hasCommerceRegistry
                ? 'bg-green-50 border-green-200 text-green-800' 
                : 'bg-gray-50 border-gray-200 text-gray-500'
            }`}>
              <div className="flex items-center space-x-2">
                {data.documents?.commerceRegistryName || !data.documents?.hasCommerceRegistry ? (
                  <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                ) : (
                  <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                )}
                <span className="text-sm font-medium">Registre Commerce</span>
              </div>
            </div>
            
            <div className={`p-3 rounded-lg border-2 transition-all duration-300 ${
              data.documents?.residenceCertificateName 
                ? 'bg-green-50 border-green-200 text-green-800' 
                : 'bg-gray-50 border-gray-200 text-gray-500'
            }`}>
              <div className="flex items-center space-x-2">
                {data.documents?.residenceCertificateName ? (
                  <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                ) : (
                  <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                )}
                <span className="text-sm font-medium">Certificat Résidence</span>
              </div>
            </div>
          </div>

          {/* Soumission déplacée vers SummaryAndSubmissionStep */}
        </div>

      </div>
    </div>
  );
};

// Étape 5 : Récapitulatif et Soumission
const SummaryAndSubmissionStep: React.FC<{
  data: BusinessCreationData, 
  updateData: (field: keyof BusinessCreationData, value: any) => void, 
  submitTrigger?: number,
  personalLocationName?: string,
  companyLocationName?: string
}> = ({ data, updateData, submitTrigger, personalLocationName, companyLocationName }) => {
  const [submitting, setSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);
  const [submitSuccess, setSubmitSuccess] = useState<string | null>(null);
  // Listes pour les sélecteurs en cascade
  const [regions, setRegions] = useState<any[]>([]);
  const [cercles, setCercles] = useState<any[]>([]);
  const [arrondissements, setArrondissements] = useState<any[]>([]);
  const [communes, setCommunes] = useState<any[]>([]);
  const [quartiers, setQuartiers] = useState<any[]>([]);
  
  // Variables d'état pour les IDs sélectionnés (UUIDs pour API)
  const [selectedRegionId, setSelectedRegionId] = useState<string>('');
  const [selectedCercleId, setSelectedCercleId] = useState<string>('');
  const [selectedArrondissementId, setSelectedArrondissementId] = useState<string>('');
  const [selectedCommuneId, setSelectedCommuneId] = useState<string>('');
  const [selectedQuartierId, setSelectedQuartierId] = useState<string>('');
  
  // Variables d'état pour les codes sélectionnés (codes numériques pour divisionCode)
  const [selectedRegionCode, setSelectedRegionCode] = useState<string>('');
  const [selectedCercleCode, setSelectedCercleCode] = useState<string>('');
  const [selectedArrondissementCode, setSelectedArrondissementCode] = useState<string>('');
  const [selectedCommuneCode, setSelectedCommuneCode] = useState<string>('');
  const [selectedQuartierCode, setSelectedQuartierCode] = useState<string>('');

  // Charger les régions au montage
  useEffect(() => {
    let mounted = true;
    divisionService.getRegions().then((res: any[]) => {
      if (mounted) setRegions(res || []);
    }).catch(() => {});
    return () => { mounted = false; };
  }, []);

  // Charger cercles quand selectedRegionId change
  useEffect(() => {
    let mounted = true;
    if (selectedRegionId) {
      divisionService.getCerclesByRegion(selectedRegionId).then((res: any[]) => {
        if (mounted) setCercles(res || []);
      }).catch(() => {});
    } else {
      setCercles([]);
      setArrondissements([]);
      setCommunes([]);
      setQuartiers([]);
      setSelectedCercleId('');
      setSelectedArrondissementId('');
      setSelectedCommuneId('');
      setSelectedQuartierId('');
    }
    return () => { mounted = false; };
  }, [selectedRegionId]);

  // Charger arrondissements quand selectedCercleId change
  useEffect(() => {
    let mounted = true;
    if (selectedCercleId) {
      divisionService.getArrondissementsByCercle(selectedCercleId).then((res: any[]) => {
        if (mounted) setArrondissements(res || []);
      }).catch(() => {});
    } else {
      setArrondissements([]);
      setCommunes([]);
      setQuartiers([]);
      setSelectedArrondissementId('');
      setSelectedCommuneId('');
      setSelectedQuartierId('');
    }
    return () => { mounted = false; };
  }, [selectedCercleId]);

  // Charger communes quand selectedArrondissementId change
  useEffect(() => {
    let mounted = true;
    if (selectedArrondissementId) {
      divisionService.getCommunesByArrondissement(selectedArrondissementId).then((res: any[]) => {
        if (mounted) setCommunes(res || []);
      }).catch(() => {});
    } else {
      setCommunes([]);
      setQuartiers([]);
      setSelectedCommuneId('');
      setSelectedQuartierId('');
    }
    return () => { mounted = false; };
  }, [selectedArrondissementId]);

  // Charger quartiers quand selectedCommuneId change
  useEffect(() => {
    let mounted = true;
    if (selectedCommuneId) {
      divisionService.getQuartiersByCommune(selectedCommuneId).then((res: any[]) => {
        if (mounted) setQuartiers(res || []);
      }).catch(() => {});
    } else {
      setQuartiers([]);
      setSelectedQuartierId('');
    }
    return () => { mounted = false; };
  }, [selectedCommuneId]);

  // Helper pour vérifier si l'activité nécessite une autorisation d'exercice
  const requiresExerciseAuthorization = () => {
    const selectedNr = data.companyInfo?.domaineActiviteNr;
    return selectedNr && DOMAINE_MAPPING[selectedNr] && DOMAINE_MAPPING[selectedNr].length > 0;
  };

  // Fonction de soumission de l'entreprise
  const handleSubmitEntreprise = async () => {
    setSubmitting(true);
    setSubmitError(null);
    setSubmitSuccess(null);

    try {
      // Validation avant soumission: chaque participant doit avoir un document d'identité
      const missingDocs: string[] = [];
      (data.participants || []).forEach((p, idx) => {
        const label = p.prenom && p.nom ? `${p.prenom} ${p.nom}` : `Participant ${idx + 1}`;
        if (!p.documentFile) {
          missingDocs.push(`${label}: document d'identité manquant`);
        }
        if (p.role === 'GERANT' && data.personalInfo?.hasCriminalRecord && !p.casierJudiciaireFile) {
          missingDocs.push(`${label}: casier judiciaire manquant (gérant)`);
        }
        if (p.role === 'GERANT' && !data.personalInfo?.hasCriminalRecord && !p.declarationHonneurFile) {
          missingDocs.push(`${label}: déclaration d'honneur manquante (gérant sans casier judiciaire)`);
        }
        if (p.role === 'GERANT' && data.personalInfo?.isMarried && !p.acteMariageFile) {
          missingDocs.push(`${label}: acte de mariage manquant (gérant marié)`);
        }
        if (p.role === 'GERANT' && !p.extraitNaissanceFile) {
          missingDocs.push(`${label}: extrait de naissance manquant (gérant)`);
        }
      });
      if (missingDocs.length > 0) {
        setSubmitError(`Documents requis manquants:\n- ${missingDocs.join('\n- ')}`);
        setSubmitting(false);
        return;
      }

      // VALIDATION PRÉALABLE: Vérifier l'unicité des pièces d'identité
      console.log('🔍 Vérification de l\'unicité des pièces d\'identité...');
      const piecesToCheck = (data.participants || [])
        .filter(p => p.numeroPiece && p.typePiece)
        .map(p => ({
          numeroPiece: p.numeroPiece!.trim(),
          typePiece: p.typePiece!
        }));

      if (piecesToCheck.length > 0) {
        const token = localStorage.getItem('token');
        if (!token) throw new Error('Aucun token trouvé');

        // Vérifier l'unicité des pièces en utilisant l'endpoint de validation
        try {
          const validationResponse = await fetch('/api/v1/validation/check-pieces', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ pieces: piecesToCheck })
          });

          if (validationResponse.ok) {
            const validationResult = await validationResponse.json();
            
            if (validationResult.success) {
              // Vérifier s'il y a des pièces déjà utilisées
              const usedPieces = Object.entries(validationResult.results || {})
                .filter(([_, isUsed]) => isUsed)
                .map(([numero, _]) => {
                  const piece = piecesToCheck.find(p => p.numeroPiece === numero);
                  return `- ${piece?.typePiece || 'Document'} numéro "${numero}"`;
                });

              if (usedPieces.length > 0) {
                setSubmitError(`❌ Erreur : Les documents d'identité suivants sont déjà utilisés par d'autres utilisateurs :\n${usedPieces.join('\n')}\n\nVeuillez utiliser des documents différents.`);
                setSubmitting(false);
                return;
              }
            }
          } else {
            console.warn('⚠️ Endpoint de validation non disponible, on continue sans validation préalable');
          }
        } catch (e) {
          console.warn('⚠️ Erreur lors de la validation préalable:', e);
        }

        console.log('✅ Validation préalable terminée');
      }

      // WORKFLOW ÉTAPE 4: Créer tous les participants qui n'ont pas encore d'ID
      const participantsToCreate = data.participants?.filter(p => !p.personId && p.nom && p.prenom) || [];
      
      for (const participant of participantsToCreate) {
        const token = localStorage.getItem('token');
        if (!token) throw new Error('Aucun token trouvé');

        const personRequest = {
          nom: participant.nom,
          prenom: participant.prenom,
          telephone1: participant.telephone || '',
          email: participant.email || '',
          dateNaissance: participant.dateNaissance || '',
          lieuNaissance: participant.lieuNaissance || '',
          nationnalite: participant.nationnalite || 'MALIENNE',
          sexe: participant.sexe || 'MASCULIN',
          situationMatrimoniale: participant.situationMatrimoniale || 'CELIBATAIRE',
          civilite: participant.civilite || 'MONSIEUR',
          role: 'USER',
          entrepriseRole: participant.role || 'ASSOCIE'
        };

        console.log(`👤 ÉTAPE 4 - Création participant ${participant.role}:`, personRequest);

        const response = await fetch('/api/v1/persons', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(personRequest)
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(`Erreur création participant ${participant.prenom} ${participant.nom}: ${errorData.message}`);
        }
        
        const result = await response.json();
        console.log(`✅ Participant ${participant.role} créé:`, result);
        
        // Mettre à jour l'ID du participant
        participant.personId = result.id || result.data?.id;
      }

      console.log('✅ ÉTAPE 4 TERMINÉE - Tous les participants traités');

      // WORKFLOW ÉTAPE 5: Soumission finale - POST /api/v1/entreprises/with-documents
      const token = localStorage.getItem('token');
      if (!token) throw new Error('Aucun token trouvé');

      // Assembler tous les participants avec leurs IDs
      const allParticipants = data.participants?.map(p => {
        // Valider et nettoyer le rôle
        const validRoles = ['GERANT', 'DIRIGEANT', 'ASSOCIE'];
        const cleanRole = p.role?.toString().trim().toUpperCase();
        
        if (!validRoles.includes(cleanRole)) {
          throw new Error(`Rôle invalide pour participant ${p.nom} ${p.prenom}: ${p.role}`);
        }
        
        return {
          personId: p.personId || '',
          role: cleanRole,
          pourcentageParts: p.pourcentageParts || 0,
          dateDebut: p.dateDebut || new Date().toISOString().split('T')[0],
          dateFin: p.dateFin || '9999-12-31'
        };
      }) || [];

      // Ajouter le fondateur s'il n'est pas déjà dans les participants
      if (data.founderId) {
        const founderExists = allParticipants.some(p => p.personId === data.founderId);
        if (!founderExists) {
          allParticipants.push({
            personId: data.founderId,
            role: 'DIRIGEANT',
            pourcentageParts: 100 - allParticipants.reduce((sum, p) => sum + p.pourcentageParts, 0),
            dateDebut: new Date().toISOString().split('T')[0],
            dateFin: '9999-12-31'
          });
        }
      }

      const entrepriseRequest = {
        nom: data.companyInfo?.nom || '',
        sigle: data.companyInfo?.sigle || '',
        adresseDifferentIdentite: data.personalInfo?.hasDifferentAddress || false,
        extraitJudiciaire: data.personalInfo?.hasCriminalRecord || false,
        autorisationGerant: data.personalInfo?.allowsMultipleManagers || false,
        autorisationExercice: requiresExerciseAuthorization(),
        importExport: data.personalInfo?.willImportExport || false,
        statutSociete: true,
        typeEntreprise: data.companyInfo?.typeEntreprise || 'SOCIETE',
        statutCreation: 'EN_COURS',
        etapeValidation: 'ACCUEIL',
        formeJuridique: data.companyInfo?.formeJuridique || 'SARL',
        domaineActivite: data.companyInfo?.domaineActivite || 'TRANSPORT',
        capitale: data.companyInfo?.capitale || '',
        activiteSecondaire: data.companyInfo?.activiteSecondaire || '',
        divisionCode: data.companyInfo?.divisionCode || selectedQuartierCode || selectedCommuneCode || selectedArrondissementCode || selectedCercleCode || selectedRegionCode || '',
        participants: allParticipants
      };

      // Remplacer l'envoi with-documents par: création JSON puis uploads ciblés
      console.log('🏢 ÉTAPE 5 - POST /api/v1/entreprises (JSON), puis /documents/*');

      const entRes = await fetch('/api/v1/entreprises', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(entrepriseRequest)
      });

      if (!entRes.ok) {
        const errorData = await entRes.json();
        throw new Error(errorData.message || 'Erreur lors de la création de l\'entreprise');
      }
      const created = await entRes.json();
      const entrepriseId = created.id || created.data?.id;
      const entrepriseReference = created.reference || created.data?.reference || 'N/A';

      if (!entrepriseId) throw new Error('Identifiant entreprise introuvable');

      // Helpers locaux
      const safeJson = async (res: Response) => { try { return await res.json(); } catch { return null; } };

      const uploadPieceForParticipant = async (personId: string, typePiece: string, numeroPiece: string, file: File) => {
        const fd = new FormData();
        fd.append('personneId', personId);
        fd.append('entrepriseId', entrepriseId);
        fd.append('typePiece', typePiece);
        fd.append('numero', numeroPiece);
        const exp = new Date(); exp.setFullYear(exp.getFullYear() + 5);
        fd.append('dateExpiration', exp.toISOString().split('T')[0]);
        fd.append('file', file);
        const res = await fetch('/api/v1/documents/piece', { method: 'POST', headers: { 'Authorization': `Bearer ${token}` }, body: fd });
        if (!res.ok) { const err = await safeJson(res); throw new Error(err?.message || 'Upload pièce échoué'); }
      };

      const uploadDocumentFor = async (personId: string, typeDocument: string, file: File, numero?: string) => {
        const fd = new FormData();
        fd.append('personneId', personId);
        fd.append('entrepriseId', entrepriseId);
        fd.append('typeDocument', typeDocument);
        if (numero) fd.append('numero', numero);
        fd.append('file', file);
        const res = await fetch('/api/v1/documents/document', { method: 'POST', headers: { 'Authorization': `Bearer ${token}` }, body: fd });
        if (!res.ok) { const err = await safeJson(res); throw new Error(err?.message || `Upload ${typeDocument} échoué`); }
      };

      // Upload pièces identités
      {
        const list = data.participants || [];
        for (let idx = 0; idx < list.length; idx++) {
          const participant = list[idx];
          if (participant.personId && participant.documentFile && participant.typePiece && participant.numeroPiece) {
            try {
              console.log(`📎 [${idx}] Upload pièce ${participant.typePiece}`);
              await uploadPieceForParticipant(participant.personId, participant.typePiece, participant.numeroPiece, participant.documentFile);
            } catch (e) { 
              console.error('❌ Upload pièce échoué:', e);
              const errorMessage = e instanceof Error ? e.message : String(e);
              
              // Améliorer le message d'erreur avec les détails de la pièce
              let detailedError = errorMessage;
              if (errorMessage.includes('Cette meme pièce est déjà utiliser') || errorMessage.includes('déjà utiliser')) {
                const participantName = participant.prenom && participant.nom ? `${participant.prenom} ${participant.nom}` : `Participant ${idx + 1}`;
                detailedError = `Le document d'identité de type "${participant.typePiece}" avec le numéro "${participant.numeroPiece}" (pour ${participantName}) est déjà utilisé par un autre utilisateur. Veuillez utiliser un document différent.`;
              }
              
              setSubmitError(`❌ Erreur lors de l'upload du document : ${detailedError}`);
              setSubmitting(false);
              return;
            }
          }
        }
      }

      // Gérant: casier / acte / extrait de naissance
      const gerant = (data.participants || []).find(p => p.role === 'GERANT');
      const gerantId = gerant?.personId || null;
      if (gerantId) {
        if (gerant?.casierJudiciaireFile && data.personalInfo?.hasCriminalRecord) {
          try { await uploadDocumentFor(gerantId, 'CASIER_JUDICIAIRE', gerant.casierJudiciaireFile, `CJ-${entrepriseReference}`); } catch (e) { console.error(e); }
        }
        if (gerant?.acteMariageFile && data.personalInfo?.isMarried) {
          try { await uploadDocumentFor(gerantId, 'ACTE_MARIAGE', gerant.acteMariageFile, `AM-${entrepriseReference}`); } catch (e) { console.error(e); }
        }
        // Upload déclaration sur l'honneur si pas de casier judiciaire
        if (!data.personalInfo?.hasCriminalRecord && gerant?.declarationHonneurFile) {
          try { 
            await uploadDocumentFor(gerantId, 'DECLARATION_HONNEUR', gerant.declarationHonneurFile, `DH-${entrepriseReference}`); 
            console.log('✅ Déclaration sur l\'honneur uploadée');
          } catch (e) { console.error('❌ Upload déclaration honneur échoué:', e); }
        }
        if (gerant?.extraitNaissanceFile) {
          try { await uploadDocumentFor(gerantId, 'EXTRAIT_NAISSANCE', gerant.extraitNaissanceFile, `EN-${entrepriseReference}`); } catch (e) { console.error(e); }
        }
      }

      // Entreprise: statuts / registre / certificat résidence
      const dirigeant = (data.participants || []).find(p => p.role === 'DIRIGEANT');
      const dirigeantId = dirigeant?.personId || gerantId || null;
      if (data.documents?.statutes && dirigeantId) {
        try { await uploadDocumentFor(dirigeantId, 'STATUS_SOCIETE', data.documents.statutes, `STATUTS-${entrepriseReference}`); } catch (e) { console.error(e); }
      }
      if (data.documents?.commerceRegistry && dirigeantId) {
        try { await uploadDocumentFor(dirigeantId, 'REGISTRE_COMMERCE', data.documents.commerceRegistry, `RC-${entrepriseReference}`); } catch (e) { console.error(e); }
      }
      if (data.documents?.residenceCertificate && gerantId) {
        try { await uploadDocumentFor(gerantId, 'CERTIFICAT_RESIDENCE', data.documents.residenceCertificate, `CR-${entrepriseReference}`); } catch (e) { console.error(e); }
      }

      // Message de succès avec notification d'autorisation si nécessaire
      let successMessage = '🎉 Entreprise créée et documents téléchargés ! Référence: ' + entrepriseReference;
      
      if (requiresExerciseAuthorization()) {
        const selectedNr = data.companyInfo?.domaineActiviteNr;
        const domaineReglemente = DOMAINE_MAPPING[selectedNr!][0];
        const template = AUTORISATION_TEMPLATES[domaineReglemente];
        
        successMessage += `\n\n⚠️ IMPORTANT: Votre activité "${template?.title || 'sélectionnée'}" nécessite une DEMANDE D'AUTORISATION D'EXERCICE.`;
        successMessage += '\n📋 Vous devez maintenant constituer et déposer un dossier de demande d\'autorisation auprès de l\'Agence pour la Promotion des Investissements au Mali (API-Mali).';
        successMessage += '\n📧 Un email de notification vous sera envoyé avec les détails et la procédure à suivre.';
      }
      
      setSubmitSuccess(successMessage);
      
    } catch (error: any) {
      console.error('❌ Erreur lors de la création de l\'entreprise:', error);
      setSubmitError(error?.message || 'Erreur lors de la création de l\'entreprise');
    } finally {
      setSubmitting(false);
    }
  };

  // Déclencheur externe depuis le parent (bouton global)
  useEffect(() => {
    if (submitTrigger) {
      handleSubmitEntreprise();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [submitTrigger]);

  const costs = {
    total: 50000, // Coût total
    details: 'Frais de création d\'entreprise',
    immatriculation: 25000, // Frais d'immatriculation
    service: 15000, // Frais de service
    publication: 10000, // Frais de publication
    additionalPartners: 0 // Frais pour associés supplémentaires
  };

  return (
    <div className="animate-fade-in">
      <h2 className="text-3xl font-bold text-mali-dark mb-2 animate-slide-up">Récapitulatif et Soumission</h2>
      <p className="text-gray-600 mb-8 animate-slide-up" style={{animationDelay: '0.1s'}}>
        Vérifiez les informations de votre entreprise avant de soumettre votre demande de création.
      </p>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Récapitulatif */}
        <div className="space-y-6">
          {/* Informations de l'entreprise */}
          <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100 animate-slide-up" style={{animationDelay: '0.2s'}}>
            <h3 className="text-xl font-semibold text-mali-dark mb-4 flex items-center">
              <span className="bg-mali-emerald text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">🏢</span>
              Informations de l'Entreprise
            </h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-gray-600">Nom de l'entreprise :</span>
                <span className="font-medium text-mali-dark">{data.companyInfo?.nom}</span>
              </div>
              {data.companyInfo?.capitale && (
                <div className="flex justify-between">
                  <span className="text-gray-600">Capitale :</span>
                  <span className="font-medium text-mali-dark">{data.companyInfo?.capitale}</span>
                </div>
              )}
              <div className="flex justify-between">
                <span className="text-gray-600">Type d'entreprise :</span>
                <span className="font-medium text-mali-dark">
                  {data.companyInfo?.typeEntreprise === 'SOCIETE' ? 'Société' : 'Entreprise Individuelle'}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Forme juridique :</span>
                <span className="font-medium text-mali-dark">{data.companyInfo?.formeJuridique}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Domaine d'activité :</span>
                <span className="font-medium text-mali-dark">{data.companyInfo?.domaineActivite}</span>
              </div>
              {data.companyInfo?.domaineActiviteNr && (
                <div className="flex justify-between">
                  <span className="text-gray-600">Domaine d'activité secondaire :</span>
                  <span className="font-medium text-mali-dark">{DOMAINE_ACTIVITE_NR_LABELS[data.companyInfo.domaineActiviteNr]}</span>
                </div>
              )}
              <div className="flex justify-between">
                <span className="text-gray-600">Localisation entreprise :</span>
                <span className="font-medium text-mali-dark">{companyLocationName || data.companyInfo?.divisionCode || 'Non spécifiée'}</span>
              </div>
              {data.participants && data.participants.length > 0 && (
                <div className="flex justify-between">
                  <span className="text-gray-600">Nombre de participants :</span>
                  <span className="font-medium text-mali-dark">{data.participants.length}</span>
                </div>
              )}
            </div>
          </div>

          {/* Informations personnelles */}
          {data.personalInfo && (
            <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100 animate-slide-up" style={{animationDelay: '0.3s'}}>
              <h3 className="text-xl font-semibold text-mali-dark mb-4 flex items-center">
                <span className="bg-mali-gold text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">👤</span>
                Informations Personnelles
              </h3>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-600">Nom complet :</span>
                  <span className="font-medium text-mali-dark">
                    {CIVILITE_LABELS[data.personalInfo.civility || ''] || data.personalInfo.civility} {data.personalInfo.firstName} {data.personalInfo.lastName}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Fonction :</span>
                  <span className="font-medium text-mali-dark">{data.personalInfo.position}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Contact :</span>
                  <span className="font-medium text-mali-dark">{data.personalInfo.phone}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Localisation personnelle :</span>
                  <span className="font-medium text-mali-dark">{personalLocationName || data.personalInfo.divisionId || 'Non spécifiée'}</span>
                </div>
                {data.personalInfo.localite && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Localité :</span>
                    <span className="font-medium text-mali-dark">{data.personalInfo.localite}</span>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Informations de l'entreprise */}
          {data.companyInfo && (
            <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100 animate-slide-up" style={{animationDelay: '0.4s'}}>
              <h3 className="text-xl font-semibold text-mali-dark mb-4 flex items-center">
                <span className="bg-mali-purple text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">🎯</span>
                Informations de l'Entreprise
              </h3>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-600">Nom :</span>
                  <span className="font-medium text-mali-dark">{data.companyInfo.nom}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Sigle :</span>
                  <span className="font-medium text-mali-dark">{data.companyInfo.sigle}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Type :</span>
                  <span className="font-medium text-mali-dark">{data.companyInfo.typeEntreprise}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Forme juridique :</span>
                  <span className="font-medium text-mali-dark">{data.companyInfo.formeJuridique}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Domaine d'activité réglementé :</span>
                  <span className="font-medium text-mali-dark">{data.companyInfo.domaineActivite}</span>
                </div>
                {data.companyInfo?.domaineActiviteNr && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Domaine d'activité non réglementé :</span>
                    <span className="font-medium text-mali-dark">{DOMAINE_ACTIVITE_NR_LABELS[data.companyInfo.domaineActiviteNr]}</span>
                  </div>
                )}
                
                {/* Bouton demande d'autorisation si domaine réglementé */}
              </div>
            </div>
          )}

          {/* Participants */}
          {data.participants && data.participants.length > 0 && (
            <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100 animate-slide-up" style={{animationDelay: '0.45s'}}>
              <h3 className="text-xl font-semibold text-mali-dark mb-4 flex items-center">
                <span className="bg-mali-blue text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">👥</span>
                Participants ({data.participants.length})
              </h3>
              <div className="space-y-4">
                {data.participants.map((participant, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                    <div className="flex justify-between items-start mb-2">
                      <div>
                        <h4 className="font-medium text-mali-dark">
                          {participant.prenom} {participant.nom}
                        </h4>
                        <p className="text-sm text-gray-600">{participant.email}</p>
                      </div>
                      <div className="text-right">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          participant.role === 'DIRIGEANT' ? 'bg-green-100 text-green-800' :
                          participant.role === 'GERANT' ? 'bg-blue-100 text-blue-800' :
                          'bg-purple-100 text-purple-800'
                        }`}>
                          {participant.role}
                        </span>
                        <p className="text-sm text-gray-600 mt-1">{participant.pourcentageParts}% des parts</p>
                      </div>
                    </div>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <span className="text-gray-600">Téléphone :</span>
                        <span className="ml-2 text-mali-dark">{participant.telephone || 'Non spécifié'}</span>
                      </div>
                      <div>
                        <span className="text-gray-600">Date de début :</span>
                        <span className="ml-2 text-mali-dark">{participant.dateDebut}</span>
                      </div>
                      {participant.typePiece && (
                        <div>
                          <span className="text-gray-600">Pièce d'identité :</span>
                          <span className="ml-2 text-mali-dark">{participant.typePiece} - {participant.numeroPiece}</span>
                        </div>
                      )}
                      {participant.documentFile && (
                        <div>
                          <span className="text-gray-600">Document :</span>
                          <span className="ml-2 text-green-600">✓ Téléchargé</span>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Documents */}
          <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100 animate-slide-up" style={{animationDelay: '0.5s'}}>
            <h3 className="text-xl font-semibold text-mali-dark mb-4 flex items-center">
              <span className="bg-mali-emerald text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">📄</span>
              Documents
            </h3>
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Statuts :</span>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                  data.documents?.statutesName || data.documents?.needsStatutesDrafting
                    ? 'bg-green-100 text-green-800'
                    : 'bg-gray-100 text-gray-600'
                }`}>
                  {data.documents?.needsStatutesDrafting ? 'Rédaction InvestMali' : 
                   data.documents?.statutesName ? 'Téléchargé' : 'En attente'}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Registre de commerce :</span>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                  data.documents?.commerceRegistryName || !data.documents?.hasCommerceRegistry
                    ? 'bg-green-100 text-green-800'
                    : 'bg-gray-100 text-gray-600'
                }`}>
                  {!data.documents?.hasCommerceRegistry ? 'Non requis' :
                   data.documents?.commerceRegistryName ? 'Téléchargé' : 'En attente'}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Certificat de résidence :</span>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                  data.documents?.residenceCertificateName
                    ? 'bg-green-100 text-green-800'
                    : 'bg-gray-100 text-gray-600'
                }`}>
                  {data.documents?.residenceCertificateName ? 'Téléchargé' : 'En attente'}
                </span>
              </div>
            </div>
          </div>

          {/* Paiement */}
          <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100 animate-slide-up" style={{animationDelay: '0.55s'}}>
            <h3 className="text-xl font-semibold text-mali-dark mb-4 flex items-center">
              <span className="bg-mali-purple text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">💳</span>
              Paiement
            </h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Méthode</label>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  {(['moov','orange','wave','card'] as const).map(m => (
                    <button
                      key={m}
                      type="button"
                      onClick={() => updateData('payment', { ...(data.payment||{}), method: m })}
                      className={`px-3 py-2 rounded-lg border ${data.payment?.method===m ? 'border-mali-emerald bg-mali-emerald/10' : 'border-gray-300'}`}
                    >{m.toUpperCase()}</button>
                  ))}
                </div>
              </div>
              {data.payment?.method === 'card' && (
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <input
                    type="text"
                    placeholder="Numéro de carte"
                    value={data.payment?.cardNumber || ''}
                    onChange={(e)=>updateData('payment',{...(data.payment||{}), cardNumber: e.target.value})}
                    className="px-3 py-2 border rounded-lg"
                  />
                  <input
                    type="text"
                    placeholder="MM/YY"
                    value={data.payment?.cardExpiry || ''}
                    onChange={(e)=>updateData('payment',{...(data.payment||{}), cardExpiry: e.target.value})}
                    className="px-3 py-2 border rounded-lg"
                  />
                  <input
                    type="text"
                    placeholder="CVV"
                    value={data.payment?.cardCvv || ''}
                    onChange={(e)=>updateData('payment',{...(data.payment||{}), cardCvv: e.target.value})}
                    className="px-3 py-2 border rounded-lg"
                  />
                </div>
              )}
              {['moov','orange','wave'].includes(data.payment?.method || '') && (
                <div>
                  <label className="block text-sm text-gray-700 mb-2">Numéro de téléphone</label>
                  <input
                    type="tel"
                    placeholder="Ex: +223 70 12 34 56"
                    value={data.payment?.phoneNumber || ''}
                    onChange={(e)=>updateData('payment',{...(data.payment||{}), phoneNumber: e.target.value})}
                    className="w-full px-3 py-2 border rounded-lg"
                  />
                </div>
              )}
              <div className="bg-gray-50 p-3 rounded-lg border">
                <div className="flex justify-between text-sm">
                  <span>Immatriculation</span>
                  <span>{costs.immatriculation.toLocaleString()} FCFA</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span>Service</span>
                  <span>{costs.service.toLocaleString()} FCFA</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span>Publication</span>
                  <span>{costs.publication.toLocaleString()} FCFA</span>
                </div>
                {costs.additionalPartners>0 && (
                  <div className="flex justify-between text-sm">
                    <span>Associés supplémentaires</span>
                    <span>{costs.additionalPartners.toLocaleString()} FCFA</span>
                  </div>
                )}
                <div className="flex justify-between font-semibold mt-2">
                  <span>Total</span>
                  <span>{costs.total.toLocaleString()} FCFA</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Prochaines étapes */}
        <div className="space-y-6">
          <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100 animate-slide-up" style={{animationDelay: '0.6s'}}>
            <h3 className="text-xl font-semibold text-mali-dark mb-4 flex items-center">
              <span className="bg-mali-gold text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">⏳</span>
              Prochaines Étapes
            </h3>
            <div className="space-y-4">
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-mali-emerald text-white rounded-full flex items-center justify-center text-xs font-bold mt-1">1</div>
                <div>
                  <p className="font-medium text-mali-dark">Validation par un agent</p>
                  <p className="text-sm text-gray-600">Votre dossier sera examiné par nos agents dans les 48h</p>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-gray-300 text-white rounded-full flex items-center justify-center text-xs font-bold mt-1">2</div>
                <div>
                  <p className="font-medium text-gray-700">Paiement des frais</p>
                  <p className="text-sm text-gray-600">Après validation, vous recevrez un lien de paiement</p>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-gray-300 text-white rounded-full flex items-center justify-center text-xs font-bold mt-1">3</div>
                <div>
                  <p className="font-medium text-gray-700">Téléchargement des documents</p>
                  <p className="text-sm text-gray-600">Récupérez vos documents officiels après paiement</p>
                </div>
              </div>
            </div>
          </div>

          {/* Informations importantes */}
          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-2xl border border-blue-200 animate-slide-up" style={{animationDelay: '0.7s'}}>
            <h3 className="text-xl font-semibold text-mali-dark mb-4 flex items-center">
              <span className="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3">ℹ️</span>
              Informations Importantes
            </h3>
            
            <div className="space-y-4">
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs font-bold mt-1 flex-shrink-0">!</div>
                <div>
                  <p className="font-medium text-gray-800">Aucun paiement requis maintenant</p>
                  <p className="text-sm text-gray-600">Le paiement sera demandé uniquement après validation de votre dossier par nos agents.</p>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-green-500 text-white rounded-full flex items-center justify-center text-xs font-bold mt-1 flex-shrink-0">✓</div>
                <div>
                  <p className="font-medium text-gray-800">Validation gratuite</p>
                  <p className="text-sm text-gray-600">L'examen de votre dossier par nos experts est entièrement gratuit.</p>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-amber-500 text-white rounded-full flex items-center justify-center text-xs font-bold mt-1 flex-shrink-0">⏱</div>
                <div>
                  <p className="font-medium text-gray-800">Délai de traitement</p>
                  <p className="text-sm text-gray-600">Votre demande sera traitée dans un délai maximum de 48 heures ouvrables.</p>
                </div>
              </div>
            </div>
          </div>

          {/* Messages d'état */}
          {submitError && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-4">
              {submitError}
            </div>
          )}
          {submitSuccess && (
            <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg mb-4">
              {submitSuccess}
            </div>
          )}

          {/* Bouton de soumission */}
          <div className="bg-gradient-to-r from-mali-emerald to-mali-gold p-6 rounded-2xl shadow-lg animate-slide-up" style={{animationDelay: '0.8s'}}>
            <button
              onClick={() => handleSubmitEntreprise()}
              disabled={submitting || submitSuccess !== null}
              className="w-full bg-white text-mali-dark font-bold py-4 px-6 rounded-xl hover:bg-mali-blue/10 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-xl flex items-center justify-center space-x-3 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {submitting ? (
                <>
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-mali-dark"></div>
                  <span>Soumission en cours...</span>
                </>
              ) : submitSuccess ? (
                <>
                  <span className="text-2xl">✅</span>
                  <span>Demande Soumise avec Succès</span>
                </>
              ) : (
                <>
                  <span className="text-2xl">📤</span>
                  <span>Soumettre ma Demande</span>
                </>
              )}
            </button>
            <p className="text-white text-sm text-center mt-3 opacity-90">
              {submitSuccess ? (
                "Votre demande a été enregistrée • Suivi disponible dans votre profil"
              ) : (
                "Soumission gratuite • Validation sous 48h • Support dédié"
              )}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Fonction pour récupérer le nom de la division depuis son code/ID
const getDivisionName = async (divisionCodeOrId: string): Promise<string> => {
  try {
    console.log('🌐 Appel API pour division:', divisionCodeOrId);
    const response = await fetch(`http://localhost:8080/api/v1/divisions/code/${divisionCodeOrId}`);
    console.log('📡 Réponse API status:', response.status);
    
    if (response.ok) {
      const division = await response.json();
      console.log('📋 Données division reçues:', division);
      return division.nom || divisionCodeOrId;
    } else {
      console.warn('⚠️ API division échec, status:', response.status);
    }
  } catch (error) {
    console.error('❌ Erreur lors de la récupération du nom de division:', error);
  }
  return divisionCodeOrId; // Retourner le code/ID si échec
};

const BusinessCreation: React.FC = () => {
  const location = useLocation();
  const [currentStep, setCurrentStep] = useState(1);
  const [showForm, setShowForm] = useState(false);
  
  // États pour les noms des divisions
  const [personalLocationName, setPersonalLocationName] = useState<string>('');
  const [companyLocationName, setCompanyLocationName] = useState<string>('');
  const [businessData, setBusinessData] = useState<BusinessCreationData>({
    personalInfo: {
      civility: '',
      firstName: '',
      lastName: '',
      email: '',
      phone: '',
      birthDate: '',
      birthPlace: '',
      nationality: '',
      sexe: '',
      situationMatrimoniale: '',
      typePersonne: 'PHYSIQUE' as TypePersonne,
      idType: 'CNI',
      idNumber: '',
      idExpiryDate: '',
      idIssuedAt: '',
      address: '',
      city: '',
      region: '',
      localite: '',
      divisionId: '',
      position: '',
      powers: [],
      roleId: 0,
      idDocument: null,
      idDocumentName: '',
      isForSelf: false,
      hasDifferentAddress: false,
      hasCriminalRecord: false,
      isMarried: false,
      allowsMultipleManagers: false,
      requiresExerciseAuthorization: false,
      willImportExport: false
    },
    companyInfo: {
      nom: '',
      sigle: '',
      capitale: '',
      activiteSecondaire: '',
      typeEntreprise: 'SOCIETE' as TypeEntreprise,
      formeJuridique: 'SARL' as FormeJuridique,
      domaineActivite: 'TRANSPORT' as DomaineActivites,
      domaineActiviteNr: undefined,
      divisionCode: '',
      adresseDifferentIdentite: false,
      extraitJudiciaire: false,
      autorisationGerant: false,
      autorisationExercice: false,
      importExport: false,
      statutSociete: false,
      statutCreation: 'EN_COURS' as StatutCreation,
      etapeValidation: 'CREATION' as EtapeValidation,
      regionId: '',
      cercleId: '',
      arrondissementId: '',
      communeId: ''
    },
    participants: [],
    documents: {
      statutes: null,
      statutesName: '',
      needsStatutesDrafting: false,
      statutesPages: 0,
      commerceRegistry: null,
      commerceRegistryName: '',
      hasCommerceRegistry: false,
      residenceCertificate: null,
      residenceCertificateName: ''
    },
    payment: {
      method: '',
      phoneNumber: '',
      cardNumber: '',
      cardExpiry: '',
      cardCvv: '',
      cardName: '',
      totalAmount: 0,
      breakdown: {
        statutesDrafting: 0,
        registrationFees: 0,
        serviceFees: 0
      }
    }
  });

  // Division state (backend-driven)
  const [regions, setRegions] = useState<Array<{ id: string; nom: string }>>([]);
  const [cercles, setCercles] = useState<Array<{ id: string; nom: string }>>([]);
  const [arrondissements, setArrondissements] = useState<Array<{ id: string; nom: string }>>([]);
  const [communes, setCommunes] = useState<Array<{ id: string; nom: string }>>([]);
  const [societeJuridictions, setSocieteJuridictions] = useState<string[]>([]);

  // Selected division IDs (used for DTO mapping later)
  const [selectedRegionId, setSelectedRegionId] = useState<string | ''>('');
  const [selectedCercleId, setSelectedCercleId] = useState<string | ''>('');
  const [selectedArrondissementId, setSelectedArrondissementId] = useState<string | ''>('');
  const [selectedCommuneId, setSelectedCommuneId] = useState<string | ''>('');

  // Refs pour les animations GSAP
  const containerRef = useRef<HTMLDivElement>(null);
  const headerRef = useRef<HTMLDivElement>(null);
  const logoRef = useRef<HTMLDivElement>(null);
  const heroSectionRef = useRef<HTMLDivElement>(null);
  const heroTitleRef = useRef<HTMLHeadingElement>(null);
  const heroSubtitleRef = useRef<HTMLParagraphElement>(null);
  const heroFeaturesRef = useRef<HTMLDivElement>(null);
  const scene3DRef = useRef<HTMLDivElement>(null);
  const progressRef = useRef<HTMLDivElement>(null);
  const contentRef = useRef<HTMLDivElement>(null);
  const navigationRef = useRef<HTMLDivElement>(null);

  const totalSteps = 5;
  const steps = [
    { number: 1, title: 'Informations Personnelles', icon: '👤' },
    { number: 2, title: 'Informations Société', icon: '🏢' },
    { number: 3, title: 'Activité', icon: '💼' },
    { number: 4, title: 'Documents', icon: '📄' },
    { number: 5, title: 'Récapitulatif', icon: '✅' }
  ];

  // Détecter le retour depuis la déclaration sur l'honneur
  useEffect(() => {
    if (location.state?.returnFromDeclaration && location.state?.targetStep) {
      console.log('🔄 Retour depuis déclaration sur l\'honneur, redirection vers étape', location.state.targetStep);
      setCurrentStep(location.state.targetStep);
      
      // Nettoyer le state pour éviter de réappliquer
      window.history.replaceState({}, document.title, '/create-business');
    }
  }, [location.state]);

  // Animation d'entrée de la page
  useEffect(() => {
    const ctx = gsap.context(() => {
      // Timeline principale pour l'entrée
      const tl = gsap.timeline();

      // Animation du logo et header
      tl.fromTo(logoRef.current,
        { opacity: 0, x: -30, scale: 0.8 },
        { opacity: 1, x: 0, scale: 1, duration: 0.6, ease: "back.out(1.7)" }
      );

      // Animation du titre hero
      tl.fromTo(heroTitleRef.current,
        { opacity: 0, y: 50 },
        { opacity: 1, y: 0, duration: 0.8, ease: "power3.out" },
        "-=0.3"
      );

      // Animation du sous-titre hero
      tl.fromTo(heroSubtitleRef.current,
        { opacity: 0, y: 30 },
        { opacity: 1, y: 0, duration: 0.6, ease: "power2.out" },
        "-=0.4"
      );

      // Animation des features hero
      tl.fromTo(heroFeaturesRef.current?.children || [],
        { opacity: 0, x: -20, scale: 0.9 },
        { opacity: 1, x: 0, scale: 1, duration: 0.5, stagger: 0.1, ease: "back.out(1.7)" },
        "-=0.3"
      );

      // Animation de la scène 3D
      tl.fromTo(scene3DRef.current,
        { opacity: 0, x: 50, rotationY: -15 },
        { opacity: 1, x: 0, rotationY: 0, duration: 0.8, ease: "power3.out" },
        "-=0.4"
      );

      // Animation de la barre de progression
      tl.fromTo(progressRef.current?.children || [],
        { opacity: 0, y: -20, scale: 0.9 },
        { opacity: 1, y: 0, scale: 1, duration: 0.5, stagger: 0.1, ease: "power2.out" },
        "-=0.2"
      );

      // Animation du contenu principal
      tl.fromTo(contentRef.current,
        { opacity: 0, y: 30, scale: 0.95 },
        { opacity: 1, y: 0, scale: 1, duration: 0.6, ease: "power3.out" },
        "-=0.2"
      );

      // Animation des boutons de navigation
      tl.fromTo(navigationRef.current?.children || [],
        { opacity: 0, y: 20 },
        { opacity: 1, y: 0, duration: 0.4, stagger: 0.1, ease: "power2.out" },
        "-=0.1"
      );

    }, containerRef);

    return () => ctx.revert();
  }, []);

  // Charger les formes juridiques (SocieteJuridiction) lorsque le type = 'societe'
  useEffect(() => {
    const loadJuridictions = async () => {
      if (businessData.companyInfo?.typeEntreprise === 'SOCIETE') {
        try {
          const values = await enumService.getSocieteJuridictions();
          setSocieteJuridictions(Array.isArray(values) ? values : []);
        } catch (e) {
          console.error('Failed to load SocieteJuridiction', e);
          setSocieteJuridictions([]);
        }
      } else {
        setSocieteJuridictions([]);
      }
    };
    loadJuridictions();
  }, [businessData.companyInfo?.typeEntreprise]);

  // Load regions on mount
  useEffect(() => {
    (async () => {
      try {
        const regionList = await divisionService.getRegions();
        setRegions(regionList || []);
      } catch (e) {
        console.error('Failed to load regions', e);
      }
    })();
  }, []);

  // Cascade: region -> cercles
  useEffect(() => {
    if (!selectedRegionId) {
      setCercles([]); setArrondissements([]); setCommunes([]);
      setSelectedCercleId(''); setSelectedArrondissementId(''); setSelectedCommuneId('');
      return;
    }
    (async () => {
      try {
        const list = await divisionService.getCerclesByRegion(selectedRegionId);
        setCercles(list || []);
        setArrondissements([]); setCommunes([]);
        setSelectedCercleId(''); setSelectedArrondissementId(''); setSelectedCommuneId('');
      } catch (e) { console.error('Failed to load cercles', e); }
    })();
  }, [selectedRegionId]);

  // Cascade: cercle -> arrondissements
  useEffect(() => {
    if (!selectedCercleId) {
      setArrondissements([]); setCommunes([]);
      setSelectedArrondissementId(''); setSelectedCommuneId('');
      return;
    }
    (async () => {
      try {
        const list = await divisionService.getArrondissementsByCercle(selectedCercleId);
        setArrondissements(list || []);
        setCommunes([]);
        setSelectedArrondissementId(''); setSelectedCommuneId('');
      } catch (e) { console.error('Failed to load arrondissements', e); }
    })();
  }, [selectedCercleId]);

  // Cascade: arrondissement -> communes
  useEffect(() => {
    if (!selectedArrondissementId) {
      setCommunes([]);
      setSelectedCommuneId('');
      return;
    }
    (async () => {
      try {
        const list = await divisionService.getCommunesByArrondissement(selectedArrondissementId);
        setCommunes(list || []);
        setSelectedCommuneId('');
      } catch (e) { console.error('Failed to load communes', e); }
    })();
  }, [selectedArrondissementId]);

  // Récupérer les noms des divisions pour l'affichage dans le récapitulatif
  useEffect(() => {
    const fetchDivisionNames = async () => {
      // Récupérer le nom de la localisation personnelle
      if (businessData.personalInfo?.divisionId) {
        console.log('🔍 Récupération nom division personnelle pour ID:', businessData.personalInfo.divisionId);
        const personalName = await getDivisionName(businessData.personalInfo.divisionId);
        console.log('✅ Nom division personnelle récupéré:', personalName);
        setPersonalLocationName(personalName);
      }
      
      // Récupérer le nom de la localisation de l'entreprise
      if (businessData.companyInfo?.divisionCode) {
        console.log('🔍 Récupération nom division entreprise pour code:', businessData.companyInfo.divisionCode);
        const companyName = await getDivisionName(businessData.companyInfo.divisionCode);
        console.log('✅ Nom division entreprise récupéré:', companyName);
        setCompanyLocationName(companyName);
      }
    };
    
    fetchDivisionNames();
  }, [businessData.personalInfo?.divisionId, businessData.companyInfo?.divisionCode]);

  // Animation lors du changement d'étape
  useEffect(() => {
    if (contentRef.current) {
      gsap.fromTo(contentRef.current,
        { opacity: 0, x: 30 },
        { opacity: 1, x: 0, duration: 0.5, ease: "power2.out" }
      );
    }
  }, [currentStep]);

  // Validation par étape (Étape 4 facultative)
  const validateStep = (): string | null => {
    // Étape 4 est facultative -> pas de validation bloquante
    if (currentStep === 4) return null;

    // Étape 1: Informations Personnelles
    if (currentStep === 1) {
      const personal = businessData.personalInfo;
      if (!personal) return 'Les informations personnelles sont requises.';
      
      if (!personal.civility) return 'La civilité est requise.';
      if (!personal.firstName) return 'Le prénom est requis.';
      if (!personal.lastName) return 'Le nom est requis.';
      if (!personal.email) return "L'email est requis.";
      if (!personal.phone) return 'Le téléphone est requis.';
      if (!personal.birthDate) return 'La date de naissance est requise.';
      
      // Validation de l'âge minimum (18 ans)
      if (personal.birthDate) {
        const birthDate = new Date(personal.birthDate);
        const today = new Date();
        let age = today.getFullYear() - birthDate.getFullYear();
        const monthDiff = today.getMonth() - birthDate.getMonth();
        
        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
          age--;
        }
        
        if (age < 18) {
          return 'L\'utilisateur doit avoir au moins 18 ans.';
        }
      }
      
      return null;
    }

    // Étape 2: Informations Société
    if (currentStep === 2) {
      const company = businessData.companyInfo;
      if (!company) return "Les informations de l'entreprise sont requises.";
      
      if (!company.nom) return "Le nom de l'entreprise est requis.";
      // Le sigle est optionnel
      if (!company.typeEntreprise) return "Le type d'entreprise est requis.";
      if (!company.formeJuridique) return "La forme juridique est requise.";
      if (!company.domaineActivite) return "Le domaine d'activité est requis.";
      if (!company.divisionCode) {
        console.log('Validation échouée - divisionCode manquant:', company.divisionCode);
        console.log('CompanyInfo complète:', company);
        return "La localisation de l'entreprise est requise. Veuillez sélectionner au moins une région.";
      }
      
      return null;
    }

    // Étape 3: Participants
    if (currentStep === 3) {
      const participants = businessData.participants;
      if (!participants || participants.length === 0) return 'Au moins un participant est requis.';
      
      const gerants = participants.filter(p => p.role === 'GERANT');
      const fondateurs = participants.filter(p => p.role === 'DIRIGEANT');
      
      if (gerants.length !== 1) return 'Exactement un gérant est requis.';
      if (fondateurs.length === 0) return 'Au moins un fondateur est requis.';
      
      const totalParts = participants.reduce((sum, p) => sum + (p.pourcentageParts || 0), 0);
      if (Math.abs(totalParts - 100) > 0.01) return 'La somme des parts doit être égale à 100%.';
      
      return null;
    }

    // Étape 5: pas de "Suivant" (soumission)
    return null;
  };

  const [stepError, setStepError] = useState<string | null>(null);
  const [showValidation, setShowValidation] = useState<boolean>(false);

  const nextStep = async () => {
    // Appliquer la validation pour toutes les étapes sauf la 4
    if (currentStep !== 4) {
      const err = validateStep();
      if (err) {
        setStepError(err);
        setShowValidation(true);
        // Faire défiler vers la zone de navigation/erreur
        try {
          navigationRef.current?.scrollIntoView({ behavior: 'smooth', block: 'center' });
        } catch {}
        return;
      }
    }
    
    setStepError(null);
    setShowValidation(false);
    
    // WORKFLOW ÉTAPE PAR ÉTAPE
    try {
      // ÉTAPE 1: Informations personnelles - PUT/POST selon choix utilisateur
      if (currentStep === 1) {
        if (businessData.personalInfo.isForSelf === false && !showForm) {
          setShowForm(true);
          return;
        }
        
        // Sauvegarder les informations personnelles (PUT si isForSelf, POST sinon)
        const savedPerson = await savePersonalInfoWorkflow(businessData.personalInfo);
        if (!savedPerson) return; // Erreur, on s'arrête
        
        // Stocker founderId pour les étapes suivantes
        updateBusinessData('founderId', savedPerson.id || savedPerson.data?.id);
        console.log('✅ Étape 1 terminée - founderId:', savedPerson.id);
      }
      
      // ÉTAPE 2: Informations entreprise - Validation uniquement
      if (currentStep === 2) {
        console.log('✅ Étape 2 terminée - Informations entreprise validées');
      }
      
      // ÉTAPE 3: Gestion des associés - Création avec EntrepriseRole.ASSOCIE
      if (currentStep === 3) {
        await processAssociatesWorkflow();
        console.log('✅ Étape 3 terminée - Associés créés');
      }
      
      // ÉTAPE 4: Gestion du gérant - Création avec EntrepriseRole.GERANT
      if (currentStep === 4) {
        await processManagerWorkflow();
        console.log('✅ Étape 4 terminée - Gérant créé');
      }
      
      // ÉTAPE 5: Soumission finale - POST /api/v1/entreprises
      if (currentStep === 5) {
        await submitEntrepriseWorkflow();
        console.log('✅ Étape 5 terminée - Entreprise créée');
        return; // Pas de passage à l'étape suivante
      }
      
    } catch (error) {
      console.error('❌ Erreur dans le workflow:', error);
      setStepError(`Erreur lors du traitement: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
      setShowValidation(true);
      return;
    }
    
    // Passer à l'étape suivante
    if (currentStep < totalSteps) {
      setCurrentStep(prev => Math.min(prev + 1, 5));
    }
  };

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
  };

  const updateBusinessData = (field: keyof BusinessCreationData, value: any) => {
    setBusinessData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // WORKFLOW FUNCTIONS - Implémentation des étapes du processus

  // Étape 1: Sauvegarder informations personnelles (PUT/POST selon choix)
  const savePersonalInfoWorkflow = async (personalInfo: any) => {
    try {
      const currentUser = JSON.parse(localStorage.getItem('user') || '{}');
      const token = localStorage.getItem('token');
      
      if (!token) throw new Error('Aucun token trouvé');

      // Préparer les données selon PersonCreateRequest
      const personRequest = {
        nom: personalInfo.lastName,
        prenom: personalInfo.firstName,
        telephone1: personalInfo.phone,
        email: personalInfo.email,
        dateNaissance: personalInfo.birthDate,
        lieuNaissance: personalInfo.birthPlace,
        nationnalite: personalInfo.nationality || 'MALIENNE',
        sexe: personalInfo.sexe,
        situationMatrimoniale: personalInfo.situationMatrimoniale,
        civilite: personalInfo.civility,
        // Récupérer division_id et localite depuis les données personnelles - utiliser null au lieu de undefined
        division_id: personalInfo.divisionId || personalInfo.division_id || null,
        divisionCode: personalInfo.divisionCode || null,
        localite: personalInfo.localite || personalInfo.city || null,
        role: 'USER',
        entrepriseRole: 'DIRIGEANT'
      };

      // Logs de debugging pour la localisation
      console.log('🔍 Données de localisation personnelles:', {
        'personalInfo.divisionId': personalInfo.divisionId,
        'personalInfo.division_id': personalInfo.division_id,
        'personalInfo.divisionCode': personalInfo.divisionCode,
        'personalInfo.localite': personalInfo.localite,
        'personalInfo.city': personalInfo.city
      });
      console.log('💾 Sauvegarde informations personnelles:', personRequest);

      let response;
      
      if (personalInfo.isForSelf && currentUser.personne_id) {
        // PUT - Mise à jour de la personne existante
        console.log('🔄 PUT - Mise à jour personne existante ID:', currentUser.personne_id);
        response = await fetch(`/api/v1/persons/${currentUser.personne_id}`, {
          method: 'PUT',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(personRequest)
        });
      } else {
        // POST - Création d'une nouvelle personne
        console.log('➕ POST - Création nouvelle personne');
        response = await fetch('/api/v1/persons', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(personRequest)
        });
      }
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur lors de la sauvegarde');
      }
      
      const result = await response.json();
      console.log('✅ Informations personnelles sauvegardées:', result);
      
      return result;
    } catch (err) {
      console.error('❌ Erreur sauvegarde informations personnelles:', err);
      throw err;
    }
  };

  // Étape 3: Traiter les associés avec EntrepriseRole.ASSOCIE
  const processAssociatesWorkflow = async () => {
    try {
      const associates = businessData.participants?.filter(p => p.role === 'ASSOCIE') || [];
      const createdAssociates = [];

      for (const associate of associates) {
        // Si l'associé n'a pas encore d'ID, le créer
        if (!associate.personId) {
          const associateData = {
            lastName: associate.nom || '',
            firstName: associate.prenom || '',
            phone: associate.telephone || '',
            email: associate.email || '',
            birthDate: associate.dateNaissance || '',
            birthPlace: associate.lieuNaissance || '',
            nationality: associate.nationnalite || 'MALIENNE',
            sexe: associate.sexe || 'MASCULIN',
            situationMatrimoniale: associate.situationMatrimoniale || 'CELIBATAIRE',
            civility: associate.civilite || 'MONSIEUR',
            // Ajouter les données de localisation
            divisionId: associate.divisionId || associate.division_id,
            divisionCode: associate.divisionCode,
            localite: associate.localite
          };

          const createdAssociate = await createAssociateWorkflow(associateData);
          if (createdAssociate) {
            associate.personId = createdAssociate.id || createdAssociate.data?.id;
            createdAssociates.push(createdAssociate);
          }
        }
      }

      console.log('✅ Associés traités:', createdAssociates.length);
      return createdAssociates;
    } catch (err) {
      console.error('❌ Erreur traitement associés:', err);
      throw err;
    }
  };

  // Créer un associé avec EntrepriseRole.ASSOCIE
  const createAssociateWorkflow = async (associateData: any) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('Aucun token trouvé');

      const personRequest = {
        nom: associateData.lastName,
        prenom: associateData.firstName,
        telephone1: associateData.phone,
        email: associateData.email,
        dateNaissance: associateData.birthDate,
        lieuNaissance: associateData.birthPlace,
        nationnalite: associateData.nationality || 'MALIENNE',
        sexe: associateData.sexe,
        situationMatrimoniale: associateData.situationMatrimoniale,
        civilite: associateData.civility,
        // Récupérer division_id et localite depuis les données de l'associé ou utiliser celles de l'entreprise - utiliser null au lieu de undefined
        division_id: associateData.divisionId || associateData.division_id || businessData.personalInfo?.divisionId || null,
        divisionCode: associateData.divisionCode || businessData.companyInfo?.divisionCode || null,
        localite: associateData.localite || associateData.city || businessData.personalInfo?.localite || null,
        role: 'USER',
        entrepriseRole: 'ASSOCIE'
      };

      // Logs de debugging pour la localisation de l'associé
      console.log('🔍 Données de localisation associé:', {
        'associateData.divisionId': associateData.divisionId,
        'businessData.personalInfo?.divisionId': businessData.personalInfo?.divisionId,
        'businessData.companyInfo?.divisionCode': businessData.companyInfo?.divisionCode,
        'associateData.localite': associateData.localite,
        'businessData.personalInfo?.localite': businessData.personalInfo?.localite
      });
      console.log('👥 POST - Création associé:', personRequest);

      const response = await fetch('/api/v1/persons', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(personRequest)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur lors de la création de l\'associé');
      }
      
      const result = await response.json();
      console.log('✅ Associé créé:', result);
      
      return result;
    } catch (err) {
      console.error('❌ Erreur création associé:', err);
      throw err;
    }
  };

  // Étape 4: Traiter le gérant avec EntrepriseRole.GERANT
  const processManagerWorkflow = async () => {
    try {
      const managers = businessData.participants?.filter(p => p.role === 'GERANT') || [];
      
      if (managers.length === 0) {
        throw new Error('Aucun gérant défini');
      }
      
      if (managers.length > 1) {
        throw new Error('Un seul gérant autorisé par entreprise');
      }

      const manager = managers[0];
      let createdManager = null;

      const managerData = {
        lastName: manager.nom || '',
        firstName: manager.prenom || '',
        phone: manager.telephone || '',
        email: manager.email || '',
        birthDate: manager.dateNaissance || '',
        birthPlace: manager.lieuNaissance || '',
        nationality: manager.nationnalite || 'MALIENNE',
        sexe: manager.sexe || 'MASCULIN',
        situationMatrimoniale: manager.situationMatrimoniale || 'CELIBATAIRE',
        civility: manager.civilite || 'MONSIEUR',
        // Ajouter les données de localisation
        divisionId: manager.divisionId || manager.division_id,
        divisionCode: manager.divisionCode,
        localite: manager.localite
      };

      // Si le gérant n'a pas encore d'ID, le créer, sinon le mettre à jour
      if (!manager.personId) {
        console.log('🆕 Création du gérant (pas d\'ID)');
        createdManager = await createManagerWorkflow(managerData);
        if (createdManager) {
          manager.personId = createdManager.id || createdManager.data?.id;
        }
      } else {
        console.log('🔄 Mise à jour du gérant existant (ID: ' + manager.personId + ')');
        createdManager = await updateManagerWorkflow(manager.personId, managerData);
      }

      console.log('✅ Gérant traité:', createdManager);
      return createdManager;
    } catch (err) {
      console.error('❌ Erreur traitement gérant:', err);
      throw err;
    }
  };

  // Mettre à jour un gérant existant
  const updateManagerWorkflow = async (personId: string, managerData: any) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('Aucun token trouvé');

      const personUpdateRequest = {
        nom: managerData.lastName,
        prenom: managerData.firstName,
        telephone1: managerData.phone,
        email: managerData.email,
        dateNaissance: managerData.birthDate,
        lieuNaissance: managerData.birthPlace,
        nationnalite: managerData.nationality || 'MALIENNE',
        sexe: managerData.sexe,
        situationMatrimoniale: managerData.situationMatrimoniale,
        civilite: managerData.civility,
        // Récupérer division_id et localite - utiliser null au lieu de undefined
        division_id: managerData.divisionId || managerData.division_id || businessData.personalInfo?.divisionId || null,
        divisionCode: managerData.divisionCode || businessData.companyInfo?.divisionCode || null,
        localite: managerData.localite || managerData.city || businessData.personalInfo?.localite || null
      };

      console.log('🔄 PUT - Mise à jour gérant:', personUpdateRequest);
      console.log('🗓️ Date de naissance mise à jour:', {
        'managerData.birthDate': managerData.birthDate,
        'personUpdateRequest.dateNaissance': personUpdateRequest.dateNaissance,
        'type': typeof personUpdateRequest.dateNaissance
      });

      const response = await fetch(`/api/v1/persons/${personId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(personUpdateRequest)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur lors de la mise à jour du gérant');
      }
      
      const result = await response.json();
      console.log('✅ Gérant mis à jour:', result);
      
      return result;
    } catch (err) {
      console.error('❌ Erreur mise à jour gérant:', err);
      throw err;
    }
  };

  // Créer un gérant avec EntrepriseRole.GERANT
  const createManagerWorkflow = async (managerData: any) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('Aucun token trouvé');

      const personRequest = {
        nom: managerData.lastName,
        prenom: managerData.firstName,
        telephone1: managerData.phone,
        email: managerData.email,
        dateNaissance: managerData.birthDate,
        lieuNaissance: managerData.birthPlace,
        nationnalite: managerData.nationality || 'MALIENNE',
        sexe: managerData.sexe,
        situationMatrimoniale: managerData.situationMatrimoniale,
        civilite: managerData.civility,
        // Récupérer division_id et localite depuis les données du gérant ou utiliser celles de l'entreprise - utiliser null au lieu de undefined
        division_id: managerData.divisionId || managerData.division_id || businessData.personalInfo?.divisionId || null,
        divisionCode: managerData.divisionCode || businessData.companyInfo?.divisionCode || null,
        localite: managerData.localite || managerData.city || businessData.personalInfo?.localite || null,
        role: 'USER',
        entrepriseRole: 'GERANT'
      };

      // Logs de debugging pour la localisation du gérant
      console.log('🔍 Données de localisation gérant:', {
        'managerData.divisionId': managerData.divisionId,
        'businessData.personalInfo?.divisionId': businessData.personalInfo?.divisionId,
        'businessData.companyInfo?.divisionCode': businessData.companyInfo?.divisionCode,
        'managerData.localite': managerData.localite,
        'businessData.personalInfo?.localite': businessData.personalInfo?.localite
      });
      console.log('👔 POST - Création gérant:', personRequest);
      console.log('🗓️ Date de naissance envoyée:', {
        'managerData.birthDate': managerData.birthDate,
        'personRequest.dateNaissance': personRequest.dateNaissance,
        'type': typeof personRequest.dateNaissance
      });

      const response = await fetch('/api/v1/persons', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(personRequest)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur lors de la création du gérant');
      }
      
      const result = await response.json();
      console.log('✅ Gérant créé:', result);
      
      return result;
    } catch (err) {
      console.error('❌ Erreur création gérant:', err);
      throw err;
    }
  };

  // Étape 5: Soumission finale - POST /api/v1/entreprises
  const submitEntrepriseWorkflow = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('Aucun token trouvé');

      // Assembler tous les participants avec leurs IDs
      const allParticipants = businessData.participants?.map(p => {
        // Valider et nettoyer le rôle
        const validRoles = ['GERANT', 'DIRIGEANT', 'ASSOCIE'];
        const cleanRole = p.role?.toString().trim().toUpperCase();
        
        if (!validRoles.includes(cleanRole)) {
          throw new Error(`Rôle invalide pour participant ${p.nom} ${p.prenom}: ${p.role}`);
        }
        
        return {
          personId: p.personId || '',
          role: cleanRole,
          pourcentageParts: p.pourcentageParts || 0,
          dateDebut: p.dateDebut || new Date().toISOString().split('T')[0],
          dateFin: p.dateFin || '9999-12-31'
        };
      }) || [];

      // Ajouter le fondateur s'il n'est pas déjà dans les participants
      if (businessData.founderId) {
        const founderExists = allParticipants.some(p => p.personId === businessData.founderId);
        if (!founderExists) {
          allParticipants.push({
            personId: businessData.founderId,
            role: 'DIRIGEANT',
            pourcentageParts: 100 - allParticipants.reduce((sum, p) => sum + p.pourcentageParts, 0),
            dateDebut: new Date().toISOString().split('T')[0],
            dateFin: '9999-12-31'
          });
        }
      }

      const entrepriseRequest = {
        nom: businessData.companyInfo?.nom || '',
        sigle: businessData.companyInfo?.sigle || '',
        capitale: businessData.companyInfo?.capitale || '',
        adresseDifferentIdentite: businessData.personalInfo?.hasDifferentAddress || false,
        extraitJudiciaire: businessData.personalInfo?.hasCriminalRecord || false,
        autorisationGerant: businessData.personalInfo?.allowsMultipleManagers || false,
        autorisationExercice: businessData.personalInfo?.requiresExerciseAuthorization || false,
        importExport: businessData.personalInfo?.willImportExport || false,
        statutSociete: true,
        typeEntreprise: businessData.companyInfo?.typeEntreprise || 'SOCIETE',
        statutCreation: 'EN_COURS',
        etapeValidation: 'ACCUEIL',
        formeJuridique: businessData.companyInfo?.formeJuridique || 'SARL',
        // Logique de priorité pour domaine_activite :
        // Si le domaine non réglementé a une correspondance réglementée, on prend la correspondance
        // Sinon on prend le domaine non réglementé directement
        domaineActivite: (() => {
          const selectedNr = businessData.companyInfo?.domaineActiviteNr;
          const selectedRegulated = businessData.companyInfo?.domaineActivite;
          
          // Si un domaine non réglementé est sélectionné et a des correspondances réglementées
          if (selectedNr && DOMAINE_MAPPING[selectedNr] && DOMAINE_MAPPING[selectedNr].length > 0) {
            // Prendre la première correspondance réglementée
            return DOMAINE_MAPPING[selectedNr][0];
          }
          
          // Sinon prendre le domaine non réglementé directement (converti en string)
          // Note: Cela nécessite que le backend accepte les valeurs DomaineActiviteNr dans domaine_activite
          return selectedNr || selectedRegulated || 'TRANSPORT';
        })(),
        domaineActiviteNr: businessData.companyInfo?.domaineActiviteNr || null,
        divisionCode: businessData.companyInfo?.divisionCode || 'ML01',
        activiteSecondaire: businessData.companyInfo?.activiteSecondaire || '',
        participants: allParticipants
      };

      console.log('🏢 Données entreprise avant soumission:', {
        divisionCode: businessData.companyInfo?.divisionCode,
        companyInfo: businessData.companyInfo
      });

      console.log('🏢 POST - Création entreprise:', entrepriseRequest);

      const response = await fetch('/api/v1/entreprises', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(entrepriseRequest)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erreur lors de la création de l\'entreprise');
      }
      
      const created = await response.json();
      console.log('✅ Entreprise créée avec succès:', created);

      const entrepriseId = created.id || created.data?.id;
      const entrepriseReference = created.reference || created.data?.reference || 'N/A';

      if (!entrepriseId) {
        throw new Error('Identifiant entreprise introuvable après création');
      }

      // Helper: upload pièce d'identité
      const uploadPieceForParticipant = async (personId: string, typePiece: string, numeroPiece: string, file: File) => {
        const fd = new FormData();
        fd.append('personneId', personId);
        fd.append('entrepriseId', entrepriseId);
        fd.append('typePiece', typePiece);
        fd.append('numero', numeroPiece);
        // Par défaut +5 ans
        const exp = new Date();
        exp.setFullYear(exp.getFullYear() + 5);
        const iso = exp.toISOString().split('T')[0];
        fd.append('dateExpiration', iso);
        fd.append('file', file);

        const res = await fetch('/api/v1/documents/piece', {
          method: 'POST',
          headers: { 'Authorization': `Bearer ${token}` },
          body: fd
        });
        if (!res.ok) {
          const err = await safeJson(res);
          throw new Error(err?.message || `Upload pièce échoué pour ${personId}`);
        }
        return res.json();
      };

      // Helper: upload document (casier, acte mariage, statuts, registre, certificat)
      const uploadDocumentFor = async (personId: string, typeDocument: string, file: File, numero?: string) => {
        const fd = new FormData();
        fd.append('personneId', personId);
        fd.append('entrepriseId', entrepriseId);
        fd.append('typeDocument', typeDocument);
        if (numero) fd.append('numero', numero);
        fd.append('file', file);

        const res = await fetch('/api/v1/documents/document', {
          method: 'POST',
          headers: { 'Authorization': `Bearer ${token}` },
          body: fd
        });
        if (!res.ok) {
          const err = await safeJson(res);
          throw new Error(err?.message || `Upload document ${typeDocument} échoué pour ${personId}`);
        }
        return res.json();
      };

      // Helper: parse JSON en toute sécurité
      const safeJson = async (res: Response) => {
        try { return await res.json(); } catch { return null; }
      };

      // 1) Upload des pièces d'identité des participants
      for (const p of businessData.participants || []) {
        if (p.personId && p.documentFile && p.typePiece && p.numeroPiece) {
          try {
            console.log(`📎 Upload pièce pour ${p.personId} (${p.typePiece})`);
            await uploadPieceForParticipant(p.personId, p.typePiece, p.numeroPiece, p.documentFile);
          } catch (e) {
            console.error('❌ Upload pièce participant échoué:', e);
            throw e; // Re-lancer l'erreur pour qu'elle soit gérée au niveau supérieur
          }
        }
      }

      // 2) Documents spécifiques gérant
      const gerant = (businessData.participants || []).find(pp => pp.role === 'GERANT');
      const gerantId = gerant?.personId || null;
      if (gerantId) {
        if (gerant?.casierJudiciaireFile && businessData.personalInfo?.hasCriminalRecord) {
          try {
            console.log('📎 Upload CASIER_JUDICIAIRE');
            await uploadDocumentFor(gerantId, 'CASIER_JUDICIAIRE', gerant.casierJudiciaireFile, `CJ-${entrepriseReference}`);
          } catch (e) { console.error('❌ Upload casier échoué:', e); }
        }
        if (gerant?.acteMariageFile && businessData.personalInfo?.isMarried) {
          try {
            console.log('📎 Upload ACTE_MARIAGE');
            await uploadDocumentFor(gerantId, 'ACTE_MARIAGE', gerant.acteMariageFile, `AM-${entrepriseReference}`);
          } catch (e) { console.error('❌ Upload acte mariage échoué:', e); }
        }
        // Upload déclaration sur l'honneur si pas de casier judiciaire
        if (!businessData.personalInfo?.hasCriminalRecord && gerant?.declarationHonneurFile) {
          try {
            await uploadDocumentFor(gerantId, 'DECLARATION_HONNEUR', gerant.declarationHonneurFile, `DH-${entrepriseReference}`);
            console.log('✅ Déclaration sur l\'honneur uploadée');
          } catch (e) { console.error('❌ Upload déclaration honneur échoué:', e); }
        }
      }

      // 3) Documents d'entreprise (statuts, registre, certificat de résidence)
      // Statuts et Registre sont réservés aux DIRIGEANTS — on prend le premier dirigeant
      const dirigeant = (businessData.participants || []).find(pp => pp.role === 'DIRIGEANT');
      const dirigeantId = dirigeant?.personId || gerantId || null;
      if (businessData.documents?.statutes && dirigeantId) {
        try {
          console.log('📎 Upload STATUS_SOCIETE');
          await uploadDocumentFor(dirigeantId, 'STATUS_SOCIETE', businessData.documents.statutes, `STATUTS-${entrepriseReference}`);
        } catch (e) { console.error('❌ Upload statuts échoué:', e); }
      }
      if (businessData.documents?.commerceRegistry && dirigeantId) {
        try {
          console.log('📎 Upload REGISTRE_COMMERCE');
          await uploadDocumentFor(dirigeantId, 'REGISTRE_COMMERCE', businessData.documents.commerceRegistry, `RC-${entrepriseReference}`);
        } catch (e) { console.error('❌ Upload registre commerce échoué:', e); }
      }
      if (businessData.documents?.residenceCertificate && gerantId) {
        try {
          console.log('📎 Upload CERTIFICAT_RESIDENCE');
          await uploadDocumentFor(gerantId, 'CERTIFICAT_RESIDENCE', businessData.documents.residenceCertificate, `CR-${entrepriseReference}`);
        } catch (e) { console.error('❌ Upload certificat de résidence échoué:', e); }
      }

      alert('🎉 Entreprise créée et documents téléchargés ! Référence: ' + entrepriseReference);
      
      return created;
    } catch (err) {
      console.error('❌ Erreur création entreprise:', err);
      throw err;
    }
  };

  // Déclencheur de soumission pour l'étape 5
  const [submitTrigger, setSubmitTrigger] = useState<number>(0);

  return (
    <div ref={containerRef} className="min-h-screen bg-gradient-to-br from-mali-light via-white to-mali-light relative overflow-hidden z-0">
      <AnimatedBackground variant="minimal" className="z-0" />
      {/* Header */}
      <div ref={headerRef} className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <Link to="/" className="flex items-center space-x-3">
              <div ref={logoRef} className="w-10 h-10 bg-gradient-to-r from-mali-emerald to-mali-emerald/80 rounded-xl flex items-center justify-center">
                <span className="text-white font-bold text-lg">IM</span>
              </div>
              <span className="text-xl font-bold text-mali-dark">InvestMali</span>
            </Link>
            <div className="text-sm text-gray-600">
              Étape {currentStep} sur {totalSteps}
            </div>
          </div>
        </div>
      </div>

      {/* Hero Section avec informations clés et scène 3D */}
      <div ref={heroSectionRef} className="bg-gradient-to-r from-mali-emerald to-mali-emerald/90 text-white py-12 relative z-10">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
            {/* Contenu textuel */}
            <div className="text-center lg:text-left">
              <h1 ref={heroTitleRef} className="text-3xl md:text-4xl font-extrabold mb-4">
                Créez votre <span className="text-mali-gold">entreprise en 24 heures</span>
              </h1>
              <p ref={heroSubtitleRef} className="text-xl mb-8 opacity-90">
                Simplifiez vos démarches administratives avec notre plateforme digitale. 
                <span className="font-semibold"> Processus 100% en ligne</span>, 
                accompagnement personnalisé et <span className="font-semibold">délais réduits de 70%</span>.
              </p>
              
              {/* Features clés */}
              <div ref={heroFeaturesRef} className="flex flex-wrap justify-center lg:justify-start gap-4 text-sm">
                <div className="flex items-center gap-2 bg-white/10 px-4 py-2 rounded-full backdrop-blur-sm">
                  <svg className="w-5 h-5 text-mali-gold" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                  </svg>
                  <span>100% Digital</span>
                </div>
                <div className="flex items-center gap-2 bg-white/10 px-4 py-2 rounded-full backdrop-blur-sm">
                  <svg className="w-5 h-5 text-mali-gold" fill="currentColor" viewBox="0 0 20 20">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd" />
                  </svg>
                  <span>Délais réduits de 70%</span>
                </div>
                <div className="flex items-center gap-2 bg-white/10 px-4 py-2 rounded-full backdrop-blur-sm">
                  <svg className="w-5 h-5 text-mali-gold" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span>Accompagnement personnalisé</span>
                </div>
              </div>
            </div>

            {/* Scène 3D interactive */}
            <div ref={scene3DRef} className="relative">
              <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-4 shadow-2xl">
                <BusinessCreation3D currentStep={currentStep} />
                <div className="text-center mt-4">
                  <p className="text-sm opacity-75">
                    Visualisation 3D interactive de votre progression
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Progress bar */}
      <div className="bg-white border-b">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div ref={progressRef} className="flex items-center justify-between">
            {steps.map((step, index) => (
              <div key={step.number} className="flex items-center">
                <div className={`flex items-center justify-center w-12 h-12 rounded-full text-sm font-medium transition-all duration-300 ${
                  step.number <= currentStep 
                    ? 'bg-mali-emerald text-white shadow-lg' 
                    : 'bg-gray-200 text-gray-600'
                }`}>
                  {step.number < currentStep ? (
                    <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                  ) : (
                    <span className="text-2xl">{step.icon}</span>
                  )}
                </div>
                <div className="ml-3 hidden md:block">
                  <div className={`text-sm font-medium transition-colors duration-300 ${
                    step.number <= currentStep ? 'text-mali-emerald' : 'text-gray-500'
                  }`}>
                    {step.title}
                  </div>
                </div>
                {index < steps.length - 1 && (
                  <div className={`hidden md:block w-16 h-1 mx-4 rounded transition-colors duration-300 ${
                    step.number < currentStep ? 'bg-mali-emerald' : 'bg-gray-200'
                  }`}></div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="max-w-8xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative z-20">
        <div ref={contentRef} className="bg-white rounded-2xl shadow-xl p-8 relative z-20 pointer-events-auto">
          {currentStep === 1 && (
            <PersonalInfoStep 
              data={businessData}
              updateData={updateBusinessData}
              onNext={() => setCurrentStep(2)}
              showForm={showForm}
              setShowForm={setShowForm}
            />
          )}
          {currentStep === 2 && (
            <CompanyInfoStep 
              data={businessData} 
              updateData={updateBusinessData}
            />
          )}
          {currentStep === 3 && (
            <div className="animate-fade-in">
              <h2 className="text-3xl font-bold text-mali-dark mb-2">Participants</h2>
              <p className="text-gray-600 mb-8">Gestion des participants de l'entreprise</p>
              <div className="text-center py-8">
                <p className="text-gray-500 mb-4">Cette étape sera implémentée prochainement</p>
                <button
                  onClick={() => setCurrentStep(4)}
                  className="px-6 py-3 bg-mali-emerald text-white rounded-xl hover:bg-mali-emerald/90 transition-colors"
                >
                  Continuer
                </button>
              </div>
            </div>
          )}
          {currentStep === 4 && (
            <DocumentsStep 
              data={businessData} 
              updateData={updateBusinessData} 
            />
          )}
          {currentStep === 5 && (
            <SummaryAndSubmissionStep 
              data={businessData} 
              updateData={updateBusinessData} 
              submitTrigger={submitTrigger}
              personalLocationName={personalLocationName}
              companyLocationName={companyLocationName}
            />
          )}

          {/* Navigation buttons */}
          {stepError && (
            <div className="mt-6 mb-2 px-4 py-3 rounded-lg bg-red-50 text-red-700 border border-red-200">
              {stepError}
            </div>
          )}
          <div ref={navigationRef} className="flex justify-between mt-8 pt-6 border-t">
            <button
              onClick={prevStep}
              disabled={currentStep === 1}
              className={`px-6 py-3 rounded-xl font-medium transition-all duration-300 ${
                currentStep === 1
                  ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300 transform hover:-translate-y-0.5'
              }`}
            >
              ← Précédent
            </button>
            
            {currentStep < totalSteps ? (
              <button
                onClick={nextStep}
                className="px-8 py-3 bg-gradient-to-r from-mali-emerald to-mali-emerald/90 text-white rounded-xl font-medium hover:from-mali-emerald/90 hover:to-mali-emerald transition-all duration-300 transform hover:-translate-y-0.5 shadow-lg hover:shadow-xl"
              >
                Suivant →
              </button>
            ) : (
              <button
                onClick={() => setSubmitTrigger(Date.now())}
                className="px-8 py-3 bg-gradient-to-r from-mali-gold to-mali-gold/90 text-white rounded-xl font-medium hover:from-mali-gold/90 hover:to-mali-gold transition-all duration-300 transform hover:-translate-y-0.5 shadow-lg hover:shadow-xl"
              >
                Créer l'entreprise 🚀
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};



export default BusinessCreation;
